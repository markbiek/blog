<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mark.biek.org/</id>
    <title>Mark Biek - Blog</title>
    <updated>2022-12-14T13:22:15.323Z</updated>
    <generator>Feed for Mark Biek's Blog</generator>
    <author>
        <name>Mark Biek</name>
        <email>info@biek.org</email>
        <uri>https://mark.biek.org/</uri>
    </author>
    <link rel="alternate" href="https://mark.biek.org/"/>
    <link rel="self" href="https://mark.biek.org//rss/atom.xml"/>
    <logo>https://static.biek.org/blog/img/mark-in-code.png</logo>
    <icon>https://mark.biek.org//unicorn.svg</icon>
    <rights>All rights reserved 2022, Mark Biek</rights>
    <entry>
        <title type="html"><![CDATA[Learning a Large System]]></title>
        <id>https://mark.biek.org//2022/12/learning-a-large-system</id>
        <link href="https://mark.biek.org//2022/12/learning-a-large-system"/>
        <updated>2022-12-01T18:18:00.000Z</updated>
        <summary type="html"><![CDATA[<p>Starting work in a large, existing system is very much like trying to find your way around a very dark and very cluttered warehouse.</p>
<p>When you start, your flashlight is very small (if you even <em>have</em> a flashlight). You can only see tiny pieces of the room at a time. Nothing really makes sense and you have no sense of how any of the piles of clutter are related to each other.</p>
<p>After spending some time poking around the warehouse, you get to upgrade your flashlight. You can start to see more swaths of the room and once and can even infer a little bit about how different piles work together. But this is where it gets tricky. It's easy to make false assumptions about the parts you're seeing when the reality is still hidden in the darkness.</p>
<p>And the process continues like this as time goes by.</p>
<p>You get bigger flashlights and can see more of the room.</p>
<p>Spend enough time and you may even get to turn on some overhead lights.</p>
<p>If the system isn't <em>too</em> huge, you may someday turn on all the lights and can see the whole room at once. But you may never get to that point if the system is massive enough.</p>
<p>You may have a section of the room that you're most familiar with while someone else may know about other parts. This is great because then you can ask each other about what is in each pile of clutter.</p>
<p>In that case, you and everyone else in the room has to rely on each other.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Starting work in a large, existing system is very much like trying to find your way around a very dark and very cluttered warehouse.</p>
<p>When you start, your flashlight is very small (if you even <em>have</em> a flashlight). You can only see tiny pieces of the room at a time. Nothing really makes sense and you have no sense of how any of the piles of clutter are related to each other.</p>
<p>After spending some time poking around the warehouse, you get to upgrade your flashlight. You can start to see more swaths of the room and once and can even infer a little bit about how different piles work together. But this is where it gets tricky. It's easy to make false assumptions about the parts you're seeing when the reality is still hidden in the darkness.</p>
<p>And the process continues like this as time goes by.</p>
<p>You get bigger flashlights and can see more of the room.</p>
<p>Spend enough time and you may even get to turn on some overhead lights.</p>
<p>If the system isn't <em>too</em> huge, you may someday turn on all the lights and can see the whole room at once. But you may never get to that point if the system is massive enough.</p>
<p>You may have a section of the room that you're most familiar with while someone else may know about other parts. This is great because then you can ask each other about what is in each pile of clutter.</p>
<p>In that case, you and everyone else in the room has to rely on each other.</p>
]]></content>
        <author>
            <name>Mark Biek</name>
            <email>info@biek.org</email>
            <uri>https://mark.biek.org/</uri>
        </author>
        <contributor>
            <name>Mark Biek</name>
            <email>info@biek.org</email>
            <uri>https://mark.biek.org/</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Advice from a software-development old head]]></title>
        <id>https://mark.biek.org//2022/07/advice-from-an-old-head</id>
        <link href="https://mark.biek.org//2022/07/advice-from-an-old-head"/>
        <updated>2022-07-14T15:06:00.000Z</updated>
        <summary type="html"><![CDATA[<p>After 25 years working as a software developer, I've been thinking a lot about the things that have been the most important over the course of my career. The interesting pattern I've noticed is that most of these things aren't unique to software development at all. You could easily apply them to just about anything.</p>
<h1>Curiosity is your friend</h1>
<ul>
<li>Always wonder about things.</li>
<li>Wonder how things work.</li>
<li>Wonder <em>why</em> they work the way they do.</li>
<li>Explore! Try to see things that other people aren't seeing.</li>
</ul>
<h1>Never stop learning</h1>
<ul>
<li>Fall in love with learning new things.</li>
<li>Fall in love with learning more about things you already know.</li>
<li>Get good at the process of learning so you can learn more things faster!</li>
</ul>
<h1>Communication is key</h1>
<ul>
<li>We don't do work in a vacuum. Being able to communicate your ideas to others is paramount.</li>
<li>Learn to writing clearly and simply.
<ul>
<li>The <a href="https://fieldguide.automattic.com/the-automattic-style-guide/">Automattic Style Guide</a> is a good compilation of resources.</li>
</ul>
</li>
<li>
<blockquote>
<p>"Programs are meant to be read by humans and only incidentally for computers to execute." - Donald Knuth</p>
</blockquote>
</li>
</ul>
<h1>Master your tools</h1>
<ul>
<li>Learn the ins and outs and full capabilities of your tools. Nothing makes work faster than efficient tool use.
<ul>
<li><a href="https://code.visualstudio.com/docs">Visual Studio Code docs</a></li>
<li><a href="https://vimhelp.org/">Vim help</a></li>
</ul>
</li>
<li>Collect keyboard shortcuts for all the programs you use. Make it a game where you lose points when you touch the mouse. Write the shortcuts on post-its stuck to your monitor to help you remember.
<ul>
<li><a href="https://www.alfredapp.com/">AlfredApp</a></li>
<li><a href="https://support.apple.com/en-us/HT201236">OSX shortcuts</a></li>
</ul>
</li>
<li>Get good at the command-line. At a minimum, get comfortable manipulating files and strings from the cli.
<ul>
<li><a href="https://ubuntu.com/tutorials/command-line-for-beginners#1-overview">Beginner's guide to the cli</a></li>
</ul>
</li>
</ul>
<h1>Get good at searching</h1>
<p>There's to much stuff to remember so you're going to spend a lot of time trying to find what you need.</p>
<h2>Searching for information</h2>
<p>Get good at searching the Internet.</p>
<ul>
<li>You need to be able to track down the source of error messages.</li>
<li>There will be things you don't know how to do and other people have already done them. Learn how to find those details!</li>
</ul>
<h2>Searching Code</h2>
<p>How do you know where the code you need to change lives? You have to search for it!</p>
<ul>
<li>Your editor probably has all kinds of fancy search tools. Learn how to use them.</li>
<li>Learn cli search tools (<code>grep</code>, <code>ack</code>, <code>ripgrep</code>, etc). There are lots of them.
<ul>
<li><a href="https://beyondgrep.com/">ack</a></li>
</ul>
</li>
<li>Learn enough regex to make your searches more efficient.
<ul>
<li><a href="https://regextutorial.org/">Regex tutorial</a></li>
</ul>
</li>
<li>Learn how to trace your way through code. Maybe you need to change the functionality of a button and you don't know where the code is. Start by finding where the button markup is, then trace your way back up through the code.</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<p>After 25 years working as a software developer, I've been thinking a lot about the things that have been the most important over the course of my career. The interesting pattern I've noticed is that most of these things aren't unique to software development at all. You could easily apply them to just about anything.</p>
<h1>Curiosity is your friend</h1>
<ul>
<li>Always wonder about things.</li>
<li>Wonder how things work.</li>
<li>Wonder <em>why</em> they work the way they do.</li>
<li>Explore! Try to see things that other people aren't seeing.</li>
</ul>
<h1>Never stop learning</h1>
<ul>
<li>Fall in love with learning new things.</li>
<li>Fall in love with learning more about things you already know.</li>
<li>Get good at the process of learning so you can learn more things faster!</li>
</ul>
<h1>Communication is key</h1>
<ul>
<li>We don't do work in a vacuum. Being able to communicate your ideas to others is paramount.</li>
<li>Learn to writing clearly and simply.
<ul>
<li>The <a href="https://fieldguide.automattic.com/the-automattic-style-guide/">Automattic Style Guide</a> is a good compilation of resources.</li>
</ul>
</li>
<li>
<blockquote>
<p>"Programs are meant to be read by humans and only incidentally for computers to execute." - Donald Knuth</p>
</blockquote>
</li>
</ul>
<h1>Master your tools</h1>
<ul>
<li>Learn the ins and outs and full capabilities of your tools. Nothing makes work faster than efficient tool use.
<ul>
<li><a href="https://code.visualstudio.com/docs">Visual Studio Code docs</a></li>
<li><a href="https://vimhelp.org/">Vim help</a></li>
</ul>
</li>
<li>Collect keyboard shortcuts for all the programs you use. Make it a game where you lose points when you touch the mouse. Write the shortcuts on post-its stuck to your monitor to help you remember.
<ul>
<li><a href="https://www.alfredapp.com/">AlfredApp</a></li>
<li><a href="https://support.apple.com/en-us/HT201236">OSX shortcuts</a></li>
</ul>
</li>
<li>Get good at the command-line. At a minimum, get comfortable manipulating files and strings from the cli.
<ul>
<li><a href="https://ubuntu.com/tutorials/command-line-for-beginners#1-overview">Beginner's guide to the cli</a></li>
</ul>
</li>
</ul>
<h1>Get good at searching</h1>
<p>There's to much stuff to remember so you're going to spend a lot of time trying to find what you need.</p>
<h2>Searching for information</h2>
<p>Get good at searching the Internet.</p>
<ul>
<li>You need to be able to track down the source of error messages.</li>
<li>There will be things you don't know how to do and other people have already done them. Learn how to find those details!</li>
</ul>
<h2>Searching Code</h2>
<p>How do you know where the code you need to change lives? You have to search for it!</p>
<ul>
<li>Your editor probably has all kinds of fancy search tools. Learn how to use them.</li>
<li>Learn cli search tools (<code>grep</code>, <code>ack</code>, <code>ripgrep</code>, etc). There are lots of them.
<ul>
<li><a href="https://beyondgrep.com/">ack</a></li>
</ul>
</li>
<li>Learn enough regex to make your searches more efficient.
<ul>
<li><a href="https://regextutorial.org/">Regex tutorial</a></li>
</ul>
</li>
<li>Learn how to trace your way through code. Maybe you need to change the functionality of a button and you don't know where the code is. Start by finding where the button markup is, then trace your way back up through the code.</li>
</ul>
]]></content>
        <author>
            <name>Mark Biek</name>
            <email>info@biek.org</email>
            <uri>https://mark.biek.org/</uri>
        </author>
        <contributor>
            <name>Mark Biek</name>
            <email>info@biek.org</email>
            <uri>https://mark.biek.org/</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Launching vim from a PHP cli app and reading the output.]]></title>
        <id>https://mark.biek.org//2022/02/php-launch-vim-read-output</id>
        <link href="https://mark.biek.org//2022/02/php-launch-vim-read-output"/>
        <updated>2022-02-25T15:56:00.000Z</updated>
        <summary type="html"><![CDATA[<p>I've always wondered if it's possible to write a PHP command-line script that launches an editor, lets the user type something, then reads in whatever they type (like a git commit log message).</p>
<p>Turns out, it's pretty straightforward with the <a href="https://symfony.com/doc/current/components/process.html#using-php-streams-as-the-standard-input-of-a-process">Symfony Process</a> component.</p>
<pre><code>&#x3C;?php

require_once __DIR__ . '/vendor/autoload.php';

use Symfony\Component\Process\Process;

// Create a temporary file so the user has something to type into
$edit_file = tempnam(sys_get_temp_dir(), "_log");

// Attempt to load the user's EDITOR from the environment. Default to vim otherwise.
$editor = getenv('EDITOR') !== false ? getenv('EDITOR') : 'vim';

// Launch the editor and open the temp file
// This will pause execution of our script until they save and close the editor.
$process = new Process(['vim', $edit_file]);
$process->setTty(true);
$process->run();

// Read back the data they entered.
$data = file_get_contents($edit_file);
echo "$data\n";

// Clean up after ourselves.
unlink($edit_file);
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<p>I've always wondered if it's possible to write a PHP command-line script that launches an editor, lets the user type something, then reads in whatever they type (like a git commit log message).</p>
<p>Turns out, it's pretty straightforward with the <a href="https://symfony.com/doc/current/components/process.html#using-php-streams-as-the-standard-input-of-a-process">Symfony Process</a> component.</p>
<pre><code>&#x3C;?php

require_once __DIR__ . '/vendor/autoload.php';

use Symfony\Component\Process\Process;

// Create a temporary file so the user has something to type into
$edit_file = tempnam(sys_get_temp_dir(), "_log");

// Attempt to load the user's EDITOR from the environment. Default to vim otherwise.
$editor = getenv('EDITOR') !== false ? getenv('EDITOR') : 'vim';

// Launch the editor and open the temp file
// This will pause execution of our script until they save and close the editor.
$process = new Process(['vim', $edit_file]);
$process->setTty(true);
$process->run();

// Read back the data they entered.
$data = file_get_contents($edit_file);
echo "$data\n";

// Clean up after ourselves.
unlink($edit_file);
</code></pre>
]]></content>
        <author>
            <name>Mark Biek</name>
            <email>info@biek.org</email>
            <uri>https://mark.biek.org/</uri>
        </author>
        <contributor>
            <name>Mark Biek</name>
            <email>info@biek.org</email>
            <uri>https://mark.biek.org/</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Using jq to filter JSON by regex]]></title>
        <id>https://mark.biek.org//2021/11/using-jq-to-filter-json-by-regex</id>
        <link href="https://mark.biek.org//2021/11/using-jq-to-filter-json-by-regex"/>
        <updated>2021-11-17T16:04:00.000Z</updated>
        <summary type="html"><![CDATA[<p>If you're not already familiar with using <a href="https://stedolan.github.io/jq/">jq</a> to manipulate JSON on the command-line, go download it immediately. While it can be a little tricky to learn at first, it'll make your life so much easier.</p>
<p>For example, I recently learned how to filter a JSON result set using a regex to match the value of a particular object property.</p>
<p>Let's say I have a JSON payload that looks like this:</p>
<pre><code>{
	"total": 4,
	"domains": [
		{
			"id": 100,
			"account": 999,
			"name": "alice.com",
			"created": "2021-01-01 00:00:00"
		},
		{
			"id": 101,
			"account": 999,
			"name": "bob.com",
			"created": "2021-01-01 00:00:00"
		},
		{
			"id": 102,
			"account": 999,
			"name": "charlie.com",
			"created": "2021-01-01 00:00:00"
		},
		{
			"id": 103,
			"account": 999,
			"name": "eve.com",
			"created": "2021-01-01 00:00:00"
		}
	]
}
</code></pre>
<p>It's super easy to get all of the domain objects using the jq filter <code>.domains[]</code> and it's also trivial to get at only specific fields of each domain object (eg <code>.domains[] | {id,name}</code>).</p>
<p>Now let's say we want to only get the domain object where the name is "charlie.com".</p>
<p>That's where the <a href="https://stedolan.github.io/jq/manual/#select(boolean_expression)">select()</a> and <a href="https://stedolan.github.io/jq/manual/#test(val),test(regex;flags)">test()</a> functions come in.</p>
<p>We can use the following filter to accomplish 👆️:</p>
<p><code>.domains[] | {id,name} | select(.name | test("charlie"))</code></p>
<p><code>select</code> takes a boolean expression and, if that expression is true, returns that particular item. Everything else is filtered out.</p>
<p>The <code>test</code> function takes a regex (or simple string to match). In our particular case, <code>test</code> is checking against the <code>name</code> property of each object.</p>
<p>Now let's saw only want the <code>id</code> <em>value</em> of the object that matches our test.</p>
<p>We simply change our filter to the below:</p>
<p><code>.domains[] | {id,name} | select(.name | test("charlie")) | .id</code></p>
]]></summary>
        <content type="html"><![CDATA[<p>If you're not already familiar with using <a href="https://stedolan.github.io/jq/">jq</a> to manipulate JSON on the command-line, go download it immediately. While it can be a little tricky to learn at first, it'll make your life so much easier.</p>
<p>For example, I recently learned how to filter a JSON result set using a regex to match the value of a particular object property.</p>
<p>Let's say I have a JSON payload that looks like this:</p>
<pre><code>{
	"total": 4,
	"domains": [
		{
			"id": 100,
			"account": 999,
			"name": "alice.com",
			"created": "2021-01-01 00:00:00"
		},
		{
			"id": 101,
			"account": 999,
			"name": "bob.com",
			"created": "2021-01-01 00:00:00"
		},
		{
			"id": 102,
			"account": 999,
			"name": "charlie.com",
			"created": "2021-01-01 00:00:00"
		},
		{
			"id": 103,
			"account": 999,
			"name": "eve.com",
			"created": "2021-01-01 00:00:00"
		}
	]
}
</code></pre>
<p>It's super easy to get all of the domain objects using the jq filter <code>.domains[]</code> and it's also trivial to get at only specific fields of each domain object (eg <code>.domains[] | {id,name}</code>).</p>
<p>Now let's say we want to only get the domain object where the name is "charlie.com".</p>
<p>That's where the <a href="https://stedolan.github.io/jq/manual/#select(boolean_expression)">select()</a> and <a href="https://stedolan.github.io/jq/manual/#test(val),test(regex;flags)">test()</a> functions come in.</p>
<p>We can use the following filter to accomplish 👆️:</p>
<p><code>.domains[] | {id,name} | select(.name | test("charlie"))</code></p>
<p><code>select</code> takes a boolean expression and, if that expression is true, returns that particular item. Everything else is filtered out.</p>
<p>The <code>test</code> function takes a regex (or simple string to match). In our particular case, <code>test</code> is checking against the <code>name</code> property of each object.</p>
<p>Now let's saw only want the <code>id</code> <em>value</em> of the object that matches our test.</p>
<p>We simply change our filter to the below:</p>
<p><code>.domains[] | {id,name} | select(.name | test("charlie")) | .id</code></p>
]]></content>
        <author>
            <name>Mark Biek</name>
            <email>info@biek.org</email>
            <uri>https://mark.biek.org/</uri>
        </author>
        <contributor>
            <name>Mark Biek</name>
            <email>info@biek.org</email>
            <uri>https://mark.biek.org/</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Making a Typescript property dependent on the value of another property]]></title>
        <id>https://mark.biek.org//2021/09/making-a-typescript-property-dependent-on-the-value-of-another-property</id>
        <link href="https://mark.biek.org//2021/09/making-a-typescript-property-dependent-on-the-value-of-another-property"/>
        <updated>2021-09-30T00:42:00.000Z</updated>
        <summary type="html"><![CDATA[<p>I recently ran into a situation where I wanted Typescript to require a certain property, only if the <em>value</em> of a different property was a specific value.</p>
<p>With some help from a <a href="https://github.com/acrobertson">coworker</a> and some additional reading, I found a solution that uses a combination of <a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types">Union</a> and <a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types">Intersection</a> types.</p>
<p>Let's say I have a couple of contrived objects like this</p>
<pre><code>let a = {
	title: 'A title';
	type: 'value';
	value: 'This is a value';
};

let b = {
	title: 'Another title';
	type: 'nothing';
};
</code></pre>
<p>What I want is for the property <code>value</code> to only be required when <code>type == 'value'</code>.</p>
<p>To start, I declare a base type which contains the properties I always want to have:</p>
<pre><code>type Base = {
	title: string;
	type: 'value' | 'nothing';
}
</code></pre>
<p>Then I can declare intersection types for each possible value of the <code>type</code> property:</p>
<pre><code>type ValueType = Base &#x26; {
	type: 'value';
	value: string;
};

type NothingType = Base &#x26; {
	type: 'nothing';
	value: never;
}
</code></pre>
<p>For <code>ValueType</code>, we inherit all of the type properties of the <code>Base</code> type but require a string <code>value</code> property when <code>type == 'value'</code>;</p>
<p>For <code>NothingType</code>, we also inherit everything from <code>Base</code> but specify that the <code>value</code> property should never exist.</p>
<p>Then we create a union type that we'll use on the actual objects we declare:</p>
<pre><code>type MyType = ValueType | NothingType;
</code></pre>
<p>Here are examples of objects that pass all of our type checks:</p>
<pre><code>let good1: MyType = {
	title: 'This is a good object',
	type: 'value',
	value: 'a value'
};

let good2: MyType = {
	title: 'This is a good object',
	type: 'nothing',
};
</code></pre>
<p>And here are some objects that throw type errors:</p>
<pre><code>let bad1: MyType = {
	title: 'This is a good object',
	type: 'value',
	// Here, we're missing the `value` property
};

let bad2: MyType = {
	title: 'This is a good object',
	type: 'nothing',
	value: 'another value'
	// Here, we shouldn't have a `value` property at all
};
</code></pre>
<p><a href="https://www.typescriptlang.org/play?#code/C4TwDgpgBAQghgZ2gXigbwFAEhgEtgA2EAXFAsAE64B2A5gNzaiSkDkAbnAQK4StQAfKK2oB7YAAsatVowC+GDM2gA1LrwAq4FLETQAZOiba2nHn0ZYzvUuSp15jJdqgA5cVLpbIUVPCRQhpg4JsJiktKy2NYkUNQQ7BAU8orKUACyIN46aubZgm4e0tlORMBQtKKiACakmfmowXiEsawaUghQuJ1wFVXVUKIARgBWEADGwKwANMYswjEz0eqtvYsYcqUQ5UNw1QCMdVkujUz4RGzt3V09fTWDoxNTsyHzHCtLm4plULvVAExHBpGHDnVpXTrXXqVe7DMaTJavVrhTwyF4xNhwFFJKDrTZAA">Typescript playground example</a></p>
<h2>Update</h2>
<p>The aforementioned <a href="https://github.com/acrobertson">coworker</a> also showed me a nice way to do the same as the above using Interfaces which gives you slightly nicer error messages.</p>
<p><a href="https://www.typescriptlang.org/play?#code/JYOwLgpgTgZghgYwgAgEJwM4oN4CgCQYwYANhAFzIZhSgDmA3AWAJ4AOFyA5AG5wkBXCF2QAfbiAD2YABb0uTAL65coSLEQoAavyEAVdiggAPSCAAmGNJhzNDlXruFN8fQZ2q0QjXMtXhoeCRkADlpOW8DDmQTM0trLGQ8QntuNyEFAnTOEAgeaCUVVmiAWRYolABeZB13CrFQ8PoKplwyMGQ6SUlzSjL66uSiUk4uPTkrYCs4Tu7zZEkAIwArCAQwLgAaOw4HbK2spwcZ-d9WtogOxbhzAEY+8sNkQeZiMgdxqeQvma6ehZWaw22xSuzSTgOila7WQ13MACYHgMkq8Rh8Jt9prN-ktVusDqDRlJZPIQdljsSZNBkKcoUA">Typescript playground example</a></p>
]]></summary>
        <content type="html"><![CDATA[<p>I recently ran into a situation where I wanted Typescript to require a certain property, only if the <em>value</em> of a different property was a specific value.</p>
<p>With some help from a <a href="https://github.com/acrobertson">coworker</a> and some additional reading, I found a solution that uses a combination of <a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types">Union</a> and <a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types">Intersection</a> types.</p>
<p>Let's say I have a couple of contrived objects like this</p>
<pre><code>let a = {
	title: 'A title';
	type: 'value';
	value: 'This is a value';
};

let b = {
	title: 'Another title';
	type: 'nothing';
};
</code></pre>
<p>What I want is for the property <code>value</code> to only be required when <code>type == 'value'</code>.</p>
<p>To start, I declare a base type which contains the properties I always want to have:</p>
<pre><code>type Base = {
	title: string;
	type: 'value' | 'nothing';
}
</code></pre>
<p>Then I can declare intersection types for each possible value of the <code>type</code> property:</p>
<pre><code>type ValueType = Base &#x26; {
	type: 'value';
	value: string;
};

type NothingType = Base &#x26; {
	type: 'nothing';
	value: never;
}
</code></pre>
<p>For <code>ValueType</code>, we inherit all of the type properties of the <code>Base</code> type but require a string <code>value</code> property when <code>type == 'value'</code>;</p>
<p>For <code>NothingType</code>, we also inherit everything from <code>Base</code> but specify that the <code>value</code> property should never exist.</p>
<p>Then we create a union type that we'll use on the actual objects we declare:</p>
<pre><code>type MyType = ValueType | NothingType;
</code></pre>
<p>Here are examples of objects that pass all of our type checks:</p>
<pre><code>let good1: MyType = {
	title: 'This is a good object',
	type: 'value',
	value: 'a value'
};

let good2: MyType = {
	title: 'This is a good object',
	type: 'nothing',
};
</code></pre>
<p>And here are some objects that throw type errors:</p>
<pre><code>let bad1: MyType = {
	title: 'This is a good object',
	type: 'value',
	// Here, we're missing the `value` property
};

let bad2: MyType = {
	title: 'This is a good object',
	type: 'nothing',
	value: 'another value'
	// Here, we shouldn't have a `value` property at all
};
</code></pre>
<p><a href="https://www.typescriptlang.org/play?#code/C4TwDgpgBAQghgZ2gXigbwFAEhgEtgA2EAXFAsAE64B2A5gNzaiSkDkAbnAQK4StQAfKK2oB7YAAsatVowC+GDM2gA1LrwAq4FLETQAZOiba2nHn0ZYzvUuSp15jJdqgA5cVLpbIUVPCRQhpg4JsJiktKy2NYkUNQQ7BAU8orKUACyIN46aubZgm4e0tlORMBQtKKiACakmfmowXiEsawaUghQuJ1wFVXVUKIARgBWEADGwKwANMYswjEz0eqtvYsYcqUQ5UNw1QCMdVkujUz4RGzt3V09fTWDoxNTsyHzHCtLm4plULvVAExHBpGHDnVpXTrXXqVe7DMaTJavVrhTwyF4xNhwFFJKDrTZAA">Typescript playground example</a></p>
<h2>Update</h2>
<p>The aforementioned <a href="https://github.com/acrobertson">coworker</a> also showed me a nice way to do the same as the above using Interfaces which gives you slightly nicer error messages.</p>
<p><a href="https://www.typescriptlang.org/play?#code/JYOwLgpgTgZghgYwgAgEJwM4oN4CgCQYwYANhAFzIZhSgDmA3AWAJ4AOFyA5AG5wkBXCF2QAfbiAD2YABb0uTAL65coSLEQoAavyEAVdiggAPSCAAmGNJhzNDlXruFN8fQZ2q0QjXMtXhoeCRkADlpOW8DDmQTM0trLGQ8QntuNyEFAnTOEAgeaCUVVmiAWRYolABeZB13CrFQ8PoKplwyMGQ6SUlzSjL66uSiUk4uPTkrYCs4Tu7zZEkAIwArCAQwLgAaOw4HbK2spwcZ-d9WtogOxbhzAEY+8sNkQeZiMgdxqeQvma6ehZWaw22xSuzSTgOila7WQ13MACYHgMkq8Rh8Jt9prN-ktVusDqDRlJZPIQdljsSZNBkKcoUA">Typescript playground example</a></p>
]]></content>
        <author>
            <name>Mark Biek</name>
            <email>info@biek.org</email>
            <uri>https://mark.biek.org/</uri>
        </author>
        <contributor>
            <name>Mark Biek</name>
            <email>info@biek.org</email>
            <uri>https://mark.biek.org/</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Recreating Laravel Accessor attributes]]></title>
        <id>https://mark.biek.org//2021/04/recreating-laravel-accessor-attributes</id>
        <link href="https://mark.biek.org//2021/04/recreating-laravel-accessor-attributes"/>
        <updated>2021-04-08T18:15:00.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="https://laravel.com">Laravel</a> models have a great feature called <a href="https://laravel.com/docs/8.x/eloquent-mutators#defining-an-accessor">Accessors</a>.</p>
<p>The basic idea is that you define a class method like this</p>
<pre><code>public function getFullNameAttribute() {
	return "{$this->first_name} {$this->last_name}";
}
</code></pre>
<p>Then doing something like <code>$myClass->full_name</code> actually executes the <code>getFullNameAttribute</code> function.</p>
<p>Obviously Laravel's model class is much more full-featured and can do a lot more.</p>
<p>That said, it's pretty easy to mimic Laravel's Accessor functionality.</p>
<p>The first piece is a simple <code>Str</code> class which turns <a href="https://en.wikipedia.org/wiki/Snake_case">snake-case</a> names into <a href="https://en.wikipedia.org/wiki/Camel_case">camel-case</a> names. In a real Laravel application, you're better off using the <a href="https://laravel.com/docs/8.x/helpers">Laravel Helpers</a>.</p>
<p>Then we're going to implement a simple <code>Model</code> class</p>
<p>Now we can create a simple <code>Person</code> class which extends our <code>Model</code></p>
<p>In this case, we have two public properties for first &#x26; last name and then we've defined a <code>full_name</code> accessor.</p>
<p>To tie it all together, we can use our new class like this</p>
<p>The above script will output</p>
<pre><code>First name: Mark
Last name: Biek
Full name: Mark Biek
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<p><a href="https://laravel.com">Laravel</a> models have a great feature called <a href="https://laravel.com/docs/8.x/eloquent-mutators#defining-an-accessor">Accessors</a>.</p>
<p>The basic idea is that you define a class method like this</p>
<pre><code>public function getFullNameAttribute() {
	return "{$this->first_name} {$this->last_name}";
}
</code></pre>
<p>Then doing something like <code>$myClass->full_name</code> actually executes the <code>getFullNameAttribute</code> function.</p>
<p>Obviously Laravel's model class is much more full-featured and can do a lot more.</p>
<p>That said, it's pretty easy to mimic Laravel's Accessor functionality.</p>
<p>The first piece is a simple <code>Str</code> class which turns <a href="https://en.wikipedia.org/wiki/Snake_case">snake-case</a> names into <a href="https://en.wikipedia.org/wiki/Camel_case">camel-case</a> names. In a real Laravel application, you're better off using the <a href="https://laravel.com/docs/8.x/helpers">Laravel Helpers</a>.</p>
<p>Then we're going to implement a simple <code>Model</code> class</p>
<p>Now we can create a simple <code>Person</code> class which extends our <code>Model</code></p>
<p>In this case, we have two public properties for first &#x26; last name and then we've defined a <code>full_name</code> accessor.</p>
<p>To tie it all together, we can use our new class like this</p>
<p>The above script will output</p>
<pre><code>First name: Mark
Last name: Biek
Full name: Mark Biek
</code></pre>
]]></content>
        <author>
            <name>Mark Biek</name>
            <email>info@biek.org</email>
            <uri>https://mark.biek.org/</uri>
        </author>
        <contributor>
            <name>Mark Biek</name>
            <email>info@biek.org</email>
            <uri>https://mark.biek.org/</uri>
        </contributor>
    </entry>
</feed>