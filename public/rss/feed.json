{
    "version": "https://jsonfeed.org/version/1",
    "title": "Mark Biek - Blog",
    "home_page_url": "https://mark.biek.org/blog",
    "feed_url": "https://mark.biek.org/blog/rss/feed.json",
    "icon": "https://static.biek.org/blog/img/mark-in-code.png",
    "author": {
        "name": "Mark Biek",
        "url": "https://mark.biek.org/"
    },
    "items": [
        {
            "id": "2021/11/using-jq-to-filter-json-by-regex",
            "content_html": "<p>If you're not already familiar with using <a href=\"https://stedolan.github.io/jq/\">jq</a> to manipulate JSON on the command-line, go download it immediately. While it can be a little tricky to learn at first, it'll make your life so much easier.</p>\n<p>For example, I recently learned how to filter a JSON result set using a regex to match the value of a particular object property.</p>\n<p>Let's say I have a JSON payload that looks like this:</p>\n<pre><code>{\n\t\"total\": 4,\n\t\"domains\": [\n\t\t{\n\t\t\t\"id\": 100,\n\t\t\t\"account\": 999,\n\t\t\t\"name\": \"alice.com\",\n\t\t\t\"created\": \"2021-01-01 00:00:00\"\n\t\t},\n\t\t{\n\t\t\t\"id\": 101,\n\t\t\t\"account\": 999,\n\t\t\t\"name\": \"bob.com\",\n\t\t\t\"created\": \"2021-01-01 00:00:00\"\n\t\t},\n\t\t{\n\t\t\t\"id\": 102,\n\t\t\t\"account\": 999,\n\t\t\t\"name\": \"charlie.com\",\n\t\t\t\"created\": \"2021-01-01 00:00:00\"\n\t\t},\n\t\t{\n\t\t\t\"id\": 103,\n\t\t\t\"account\": 999,\n\t\t\t\"name\": \"eve.com\",\n\t\t\t\"created\": \"2021-01-01 00:00:00\"\n\t\t}\n\t]\n}\n</code></pre>\n<p>It's super easy to get all of the domain objects using the jq filter <code>.domains[]</code> and it's also trivial to get at only specific fields of each domain object (eg <code>.domains[] | {id,name}</code>).</p>\n<p>Now let's say we want to only get the domain object where the name is \"charlie.com\".</p>\n<p>That's where the <a href=\"https://stedolan.github.io/jq/manual/#select(boolean_expression)\">select()</a> and <a href=\"https://stedolan.github.io/jq/manual/#test(val),test(regex;flags)\">test()</a> functions come in.</p>\n<p>We can use the following filter to accomplish üëÜÔ∏è:</p>\n<p><code>.domains[] | {id,name} | select(.name | test(\"charlie\"))</code></p>\n<p><code>select</code> takes a boolean expression and, if that expression is true, returns that particular item. Everything else is filtered out.</p>\n<p>The <code>test</code> function takes a regex (or simple string to match). In our particular case, <code>test</code> is checking against the <code>name</code> property of each object.</p>\n<p>Now let's saw only want the <code>id</code> <em>value</em> of the object that matches our test.</p>\n<p>We simply change our filter to the below:</p>\n<p><code>.domains[] | {id,name} | select(.name | test(\"charlie\")) | .id</code></p>\n",
            "url": "2021/11/using-jq-to-filter-json-by-regex",
            "title": "Using jq to filter JSON by regex",
            "summary": "<p>If you're not already familiar with using <a href=\"https://stedolan.github.io/jq/\">jq</a> to manipulate JSON on the command-line, go download it immediately. While it can be a little tricky to learn at first, it'll make your life so much easier.</p>\n<p>For example, I recently learned how to filter a JSON result set using a regex to match the value of a particular object property.</p>\n<p>Let's say I have a JSON payload that looks like this:</p>\n<pre><code>{\n\t\"total\": 4,\n\t\"domains\": [\n\t\t{\n\t\t\t\"id\": 100,\n\t\t\t\"account\": 999,\n\t\t\t\"name\": \"alice.com\",\n\t\t\t\"created\": \"2021-01-01 00:00:00\"\n\t\t},\n\t\t{\n\t\t\t\"id\": 101,\n\t\t\t\"account\": 999,\n\t\t\t\"name\": \"bob.com\",\n\t\t\t\"created\": \"2021-01-01 00:00:00\"\n\t\t},\n\t\t{\n\t\t\t\"id\": 102,\n\t\t\t\"account\": 999,\n\t\t\t\"name\": \"charlie.com\",\n\t\t\t\"created\": \"2021-01-01 00:00:00\"\n\t\t},\n\t\t{\n\t\t\t\"id\": 103,\n\t\t\t\"account\": 999,\n\t\t\t\"name\": \"eve.com\",\n\t\t\t\"created\": \"2021-01-01 00:00:00\"\n\t\t}\n\t]\n}\n</code></pre>\n<p>It's super easy to get all of the domain objects using the jq filter <code>.domains[]</code> and it's also trivial to get at only specific fields of each domain object (eg <code>.domains[] | {id,name}</code>).</p>\n<p>Now let's say we want to only get the domain object where the name is \"charlie.com\".</p>\n<p>That's where the <a href=\"https://stedolan.github.io/jq/manual/#select(boolean_expression)\">select()</a> and <a href=\"https://stedolan.github.io/jq/manual/#test(val),test(regex;flags)\">test()</a> functions come in.</p>\n<p>We can use the following filter to accomplish üëÜÔ∏è:</p>\n<p><code>.domains[] | {id,name} | select(.name | test(\"charlie\"))</code></p>\n<p><code>select</code> takes a boolean expression and, if that expression is true, returns that particular item. Everything else is filtered out.</p>\n<p>The <code>test</code> function takes a regex (or simple string to match). In our particular case, <code>test</code> is checking against the <code>name</code> property of each object.</p>\n<p>Now let's saw only want the <code>id</code> <em>value</em> of the object that matches our test.</p>\n<p>We simply change our filter to the below:</p>\n<p><code>.domains[] | {id,name} | select(.name | test(\"charlie\")) | .id</code></p>\n",
            "date_modified": "2021-11-17T16:04:00.000Z",
            "author": {
                "name": "Mark Biek",
                "url": "https://mark.biek.org/"
            }
        },
        {
            "id": "2021/09/making-a-typescript-property-dependent-on-the-value-of-another-property",
            "content_html": "<p>I recently ran into a situation where I wanted Typescript to require a certain property, only if the <em>value</em> of a different property was a specific value.</p>\n<p>With some help from a <a href=\"https://github.com/acrobertson\">coworker</a> and some additional reading, I found a solution that uses a combination of <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types\">Union</a> and <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types\">Intersection</a> types.</p>\n<p>Let's say I have a couple of contrived objects like this</p>\n<pre><code>let a = {\n\ttitle: 'A title';\n\ttype: 'value';\n\tvalue: 'This is a value';\n};\n\nlet b = {\n\ttitle: 'Another title';\n\ttype: 'nothing';\n};\n</code></pre>\n<p>What I want is for the property <code>value</code> to only be required when <code>type == 'value'</code>.</p>\n<p>To start, I declare a base type which contains the properties I always want to have:</p>\n<pre><code>type Base = {\n\ttitle: string;\n\ttype: 'value' | 'nothing';\n}\n</code></pre>\n<p>Then I can declare intersection types for each possible value of the <code>type</code> property:</p>\n<pre><code>type ValueType = Base &#x26; {\n\ttype: 'value';\n\tvalue: string;\n};\n\ntype NothingType = Base &#x26; {\n\ttype: 'nothing';\n\tvalue: never;\n}\n</code></pre>\n<p>For <code>ValueType</code>, we inherit all of the type properties of the <code>Base</code> type but require a string <code>value</code> property when <code>type == 'value'</code>;</p>\n<p>For <code>NothingType</code>, we also inherit everything from <code>Base</code> but specify that the <code>value</code> property should never exist.</p>\n<p>Then we create a union type that we'll use on the actual objects we declare:</p>\n<pre><code>type MyType = ValueType | NothingType;\n</code></pre>\n<p>Here are examples of objects that pass all of our type checks:</p>\n<pre><code>let good1: MyType = {\n\ttitle: 'This is a good object',\n\ttype: 'value',\n\tvalue: 'a value'\n};\n\nlet good2: MyType = {\n\ttitle: 'This is a good object',\n\ttype: 'nothing',\n};\n</code></pre>\n<p>And here are some objects that throw type errors:</p>\n<pre><code>let bad1: MyType = {\n\ttitle: 'This is a good object',\n\ttype: 'value',\n\t// Here, we're missing the `value` property\n};\n\nlet bad2: MyType = {\n\ttitle: 'This is a good object',\n\ttype: 'nothing',\n\tvalue: 'another value'\n\t// Here, we shouldn't have a `value` property at all\n};\n</code></pre>\n<p><a href=\"https://www.typescriptlang.org/play?#code/C4TwDgpgBAQghgZ2gXigbwFAEhgEtgA2EAXFAsAE64B2A5gNzaiSkDkAbnAQK4StQAfKK2oB7YAAsatVowC+GDM2gA1LrwAq4FLETQAZOiba2nHn0ZYzvUuSp15jJdqgA5cVLpbIUVPCRQhpg4JsJiktKy2NYkUNQQ7BAU8orKUACyIN46aubZgm4e0tlORMBQtKKiACakmfmowXiEsawaUghQuJ1wFVXVUKIARgBWEADGwKwANMYswjEz0eqtvYsYcqUQ5UNw1QCMdVkujUz4RGzt3V09fTWDoxNTsyHzHCtLm4plULvVAExHBpGHDnVpXTrXXqVe7DMaTJavVrhTwyF4xNhwFFJKDrTZAA\">Typescript playground example</a></p>\n<h2>Update</h2>\n<p>The aforementioned <a href=\"https://github.com/acrobertson\">coworker</a> also showed me a nice way to do the same as the above using Interfaces which gives you slightly nicer error messages.</p>\n<p><a href=\"https://www.typescriptlang.org/play?#code/JYOwLgpgTgZghgYwgAgEJwM4oN4CgCQYwYANhAFzIZhSgDmA3AWAJ4AOFyA5AG5wkBXCF2QAfbiAD2YABb0uTAL65coSLEQoAavyEAVdiggAPSCAAmGNJhzNDlXruFN8fQZ2q0QjXMtXhoeCRkADlpOW8DDmQTM0trLGQ8QntuNyEFAnTOEAgeaCUVVmiAWRYolABeZB13CrFQ8PoKplwyMGQ6SUlzSjL66uSiUk4uPTkrYCs4Tu7zZEkAIwArCAQwLgAaOw4HbK2spwcZ-d9WtogOxbhzAEY+8sNkQeZiMgdxqeQvma6ehZWaw22xSuzSTgOila7WQ13MACYHgMkq8Rh8Jt9prN-ktVusDqDRlJZPIQdljsSZNBkKcoUA\">Typescript playground example</a></p>\n",
            "url": "2021/09/making-a-typescript-property-dependent-on-the-value-of-another-property",
            "title": "Making a Typescript property dependent on the value of another property",
            "summary": "<p>I recently ran into a situation where I wanted Typescript to require a certain property, only if the <em>value</em> of a different property was a specific value.</p>\n<p>With some help from a <a href=\"https://github.com/acrobertson\">coworker</a> and some additional reading, I found a solution that uses a combination of <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types\">Union</a> and <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types\">Intersection</a> types.</p>\n<p>Let's say I have a couple of contrived objects like this</p>\n<pre><code>let a = {\n\ttitle: 'A title';\n\ttype: 'value';\n\tvalue: 'This is a value';\n};\n\nlet b = {\n\ttitle: 'Another title';\n\ttype: 'nothing';\n};\n</code></pre>\n<p>What I want is for the property <code>value</code> to only be required when <code>type == 'value'</code>.</p>\n<p>To start, I declare a base type which contains the properties I always want to have:</p>\n<pre><code>type Base = {\n\ttitle: string;\n\ttype: 'value' | 'nothing';\n}\n</code></pre>\n<p>Then I can declare intersection types for each possible value of the <code>type</code> property:</p>\n<pre><code>type ValueType = Base &#x26; {\n\ttype: 'value';\n\tvalue: string;\n};\n\ntype NothingType = Base &#x26; {\n\ttype: 'nothing';\n\tvalue: never;\n}\n</code></pre>\n<p>For <code>ValueType</code>, we inherit all of the type properties of the <code>Base</code> type but require a string <code>value</code> property when <code>type == 'value'</code>;</p>\n<p>For <code>NothingType</code>, we also inherit everything from <code>Base</code> but specify that the <code>value</code> property should never exist.</p>\n<p>Then we create a union type that we'll use on the actual objects we declare:</p>\n<pre><code>type MyType = ValueType | NothingType;\n</code></pre>\n<p>Here are examples of objects that pass all of our type checks:</p>\n<pre><code>let good1: MyType = {\n\ttitle: 'This is a good object',\n\ttype: 'value',\n\tvalue: 'a value'\n};\n\nlet good2: MyType = {\n\ttitle: 'This is a good object',\n\ttype: 'nothing',\n};\n</code></pre>\n<p>And here are some objects that throw type errors:</p>\n<pre><code>let bad1: MyType = {\n\ttitle: 'This is a good object',\n\ttype: 'value',\n\t// Here, we're missing the `value` property\n};\n\nlet bad2: MyType = {\n\ttitle: 'This is a good object',\n\ttype: 'nothing',\n\tvalue: 'another value'\n\t// Here, we shouldn't have a `value` property at all\n};\n</code></pre>\n<p><a href=\"https://www.typescriptlang.org/play?#code/C4TwDgpgBAQghgZ2gXigbwFAEhgEtgA2EAXFAsAE64B2A5gNzaiSkDkAbnAQK4StQAfKK2oB7YAAsatVowC+GDM2gA1LrwAq4FLETQAZOiba2nHn0ZYzvUuSp15jJdqgA5cVLpbIUVPCRQhpg4JsJiktKy2NYkUNQQ7BAU8orKUACyIN46aubZgm4e0tlORMBQtKKiACakmfmowXiEsawaUghQuJ1wFVXVUKIARgBWEADGwKwANMYswjEz0eqtvYsYcqUQ5UNw1QCMdVkujUz4RGzt3V09fTWDoxNTsyHzHCtLm4plULvVAExHBpGHDnVpXTrXXqVe7DMaTJavVrhTwyF4xNhwFFJKDrTZAA\">Typescript playground example</a></p>\n<h2>Update</h2>\n<p>The aforementioned <a href=\"https://github.com/acrobertson\">coworker</a> also showed me a nice way to do the same as the above using Interfaces which gives you slightly nicer error messages.</p>\n<p><a href=\"https://www.typescriptlang.org/play?#code/JYOwLgpgTgZghgYwgAgEJwM4oN4CgCQYwYANhAFzIZhSgDmA3AWAJ4AOFyA5AG5wkBXCF2QAfbiAD2YABb0uTAL65coSLEQoAavyEAVdiggAPSCAAmGNJhzNDlXruFN8fQZ2q0QjXMtXhoeCRkADlpOW8DDmQTM0trLGQ8QntuNyEFAnTOEAgeaCUVVmiAWRYolABeZB13CrFQ8PoKplwyMGQ6SUlzSjL66uSiUk4uPTkrYCs4Tu7zZEkAIwArCAQwLgAaOw4HbK2spwcZ-d9WtogOxbhzAEY+8sNkQeZiMgdxqeQvma6ehZWaw22xSuzSTgOila7WQ13MACYHgMkq8Rh8Jt9prN-ktVusDqDRlJZPIQdljsSZNBkKcoUA\">Typescript playground example</a></p>\n",
            "date_modified": "2021-09-30T00:42:00.000Z",
            "author": {
                "name": "Mark Biek",
                "url": "https://mark.biek.org/"
            }
        },
        {
            "id": "2021/04/recreating-laravel-accessor-attributes",
            "content_html": "<p><a href=\"https://laravel.com\">Laravel</a> models have a great feature called <a href=\"https://laravel.com/docs/8.x/eloquent-mutators#defining-an-accessor\">Accessors</a>.</p>\n<p>The basic idea is that you define a class method like this</p>\n<pre><code>public function getFullNameAttribute() {\n\treturn \"{$this->first_name} {$this->last_name}\";\n}\n</code></pre>\n<p>Then doing something like <code>$myClass->full_name</code> actually executes the <code>getFullNameAttribute</code> function.</p>\n<p>Obviously Laravel's model class is much more full-featured and can do a lot more.</p>\n<p>That said, it's pretty easy to mimic Laravel's Accessor functionality.</p>\n<p>The first piece is a simple <code>Str</code> class which turns <a href=\"https://en.wikipedia.org/wiki/Snake_case\">snake-case</a> names into <a href=\"https://en.wikipedia.org/wiki/Camel_case\">camel-case</a> names. In a real Laravel application, you're better off using the <a href=\"https://laravel.com/docs/8.x/helpers\">Laravel Helpers</a>.</p>\n<p>Then we're going to implement a simple <code>Model</code> class</p>\n<p>Now we can create a simple <code>Person</code> class which extends our <code>Model</code></p>\n<p>In this case, we have two public properties for first &#x26; last name and then we've defined a <code>full_name</code> accessor.</p>\n<p>To tie it all together, we can use our new class like this</p>\n<p>The above script will output</p>\n<pre><code>First name: Mark\nLast name: Biek\nFull name: Mark Biek\n</code></pre>\n",
            "url": "2021/04/recreating-laravel-accessor-attributes",
            "title": "Recreating Laravel Accessor attributes",
            "summary": "<p><a href=\"https://laravel.com\">Laravel</a> models have a great feature called <a href=\"https://laravel.com/docs/8.x/eloquent-mutators#defining-an-accessor\">Accessors</a>.</p>\n<p>The basic idea is that you define a class method like this</p>\n<pre><code>public function getFullNameAttribute() {\n\treturn \"{$this->first_name} {$this->last_name}\";\n}\n</code></pre>\n<p>Then doing something like <code>$myClass->full_name</code> actually executes the <code>getFullNameAttribute</code> function.</p>\n<p>Obviously Laravel's model class is much more full-featured and can do a lot more.</p>\n<p>That said, it's pretty easy to mimic Laravel's Accessor functionality.</p>\n<p>The first piece is a simple <code>Str</code> class which turns <a href=\"https://en.wikipedia.org/wiki/Snake_case\">snake-case</a> names into <a href=\"https://en.wikipedia.org/wiki/Camel_case\">camel-case</a> names. In a real Laravel application, you're better off using the <a href=\"https://laravel.com/docs/8.x/helpers\">Laravel Helpers</a>.</p>\n<p>Then we're going to implement a simple <code>Model</code> class</p>\n<p>Now we can create a simple <code>Person</code> class which extends our <code>Model</code></p>\n<p>In this case, we have two public properties for first &#x26; last name and then we've defined a <code>full_name</code> accessor.</p>\n<p>To tie it all together, we can use our new class like this</p>\n<p>The above script will output</p>\n<pre><code>First name: Mark\nLast name: Biek\nFull name: Mark Biek\n</code></pre>\n",
            "date_modified": "2021-04-08T18:15:00.000Z",
            "author": {
                "name": "Mark Biek",
                "url": "https://mark.biek.org/"
            }
        },
        {
            "id": "2021/03/plugin-unit-testing-in-wordpress",
            "content_html": "<p>I'll admit that I have been pretty hit-and-miss with testing on projects over the course of my career. That said, I've been trying to be a little more consistent about it.</p>\n<p>For Laravel projects, it's real easy since <a href=\"https://phpunit.de/\">PHPUnit</a> integration is built into Laravel <a href=\"https://laravel.com/docs/8.x/testing\">right out of the box</a>.</p>\n<p>I also do a fair amount of WordPress and being able to unit test plugins and other functionality would be very handy.</p>\n<p>While the setup is a little confusing at first, WordPress also comes with great tools for testing.</p>\n<p>The official <a href=\"https://make.wordpress.org/cli/handbook/misc/plugin-unit-tests/\">WordPress testing documentation</a> is good and the <a href=\"https://developer.wordpress.org/cli/commands/scaffold/plugin-tests/\">wp cli</a> can be used to build out most of the test scaffolding for you.</p>\n<p>I also found these resources to be helpful</p>\n<ul>\n<li><a href=\"https://neliosoftware.com/blog/introduction-to-unit-testing-in-wordpress-phpunit/\">Introduction to Unit Testing in WordPress</a></li>\n<li><a href=\"https://wpmudev.com/blog/unit-testing-wordpress-plugins-phpunit/\">Unit Testing WordPress Plugins with PHPUnit</a></li>\n<li><a href=\"https://www.kirstencassidy.com/testing-wordpress-plugins-wp-cli-phpunit/\">Testing WordPress Plugins with WP-CLI and PHPUnit</a></li>\n</ul>\n<p>But there's one thing I don't like about how WordPress handles testing.</p>\n<p>They operate under the assumption that there will be a separate test database that gets completely wiped and reset each time the tests are run. While I understand the point behind, that approach doesn't work for a lot of my use-cases.</p>\n<p>There are several projects with very large databases and it's easier and makes more sense for me to run the unit tests against my local development copy.</p>\n<p>To that end, I've started a Github project: <a href=\"https://github.com/markbiek/wordpress-dev\">https://github.com/markbiek/wordpress-dev</a> which is a clone of <a href=\"http://develop.svn.wordpress.org/trunk/\">http://develop.svn.wordpress.org/trunk/</a>.</p>\n<p>The only difference is, my version doesn't delete any data when the tests are run. We've just removed the contents of the <code>_delete_all_data</code> and <code>_delete_all_posts</code> functions in <a href=\"http://develop.svn.wordpress.org/trunk/tests/phpunit/includes/functions.php\">functions.php</a>.</p>\n<p>If you can, I'd recommend sticking with the official WordPress way of testing. But hopefully this will be useful to some other people.</p>\n",
            "url": "2021/03/plugin-unit-testing-in-wordpress",
            "title": "Plugin Unit Testing in WordPress",
            "summary": "<p>I'll admit that I have been pretty hit-and-miss with testing on projects over the course of my career. That said, I've been trying to be a little more consistent about it.</p>\n<p>For Laravel projects, it's real easy since <a href=\"https://phpunit.de/\">PHPUnit</a> integration is built into Laravel <a href=\"https://laravel.com/docs/8.x/testing\">right out of the box</a>.</p>\n<p>I also do a fair amount of WordPress and being able to unit test plugins and other functionality would be very handy.</p>\n<p>While the setup is a little confusing at first, WordPress also comes with great tools for testing.</p>\n<p>The official <a href=\"https://make.wordpress.org/cli/handbook/misc/plugin-unit-tests/\">WordPress testing documentation</a> is good and the <a href=\"https://developer.wordpress.org/cli/commands/scaffold/plugin-tests/\">wp cli</a> can be used to build out most of the test scaffolding for you.</p>\n<p>I also found these resources to be helpful</p>\n<ul>\n<li><a href=\"https://neliosoftware.com/blog/introduction-to-unit-testing-in-wordpress-phpunit/\">Introduction to Unit Testing in WordPress</a></li>\n<li><a href=\"https://wpmudev.com/blog/unit-testing-wordpress-plugins-phpunit/\">Unit Testing WordPress Plugins with PHPUnit</a></li>\n<li><a href=\"https://www.kirstencassidy.com/testing-wordpress-plugins-wp-cli-phpunit/\">Testing WordPress Plugins with WP-CLI and PHPUnit</a></li>\n</ul>\n<p>But there's one thing I don't like about how WordPress handles testing.</p>\n<p>They operate under the assumption that there will be a separate test database that gets completely wiped and reset each time the tests are run. While I understand the point behind, that approach doesn't work for a lot of my use-cases.</p>\n<p>There are several projects with very large databases and it's easier and makes more sense for me to run the unit tests against my local development copy.</p>\n<p>To that end, I've started a Github project: <a href=\"https://github.com/markbiek/wordpress-dev\">https://github.com/markbiek/wordpress-dev</a> which is a clone of <a href=\"http://develop.svn.wordpress.org/trunk/\">http://develop.svn.wordpress.org/trunk/</a>.</p>\n<p>The only difference is, my version doesn't delete any data when the tests are run. We've just removed the contents of the <code>_delete_all_data</code> and <code>_delete_all_posts</code> functions in <a href=\"http://develop.svn.wordpress.org/trunk/tests/phpunit/includes/functions.php\">functions.php</a>.</p>\n<p>If you can, I'd recommend sticking with the official WordPress way of testing. But hopefully this will be useful to some other people.</p>\n",
            "date_modified": "2021-03-12T01:13:00.000Z",
            "author": {
                "name": "Mark Biek",
                "url": "https://mark.biek.org/"
            }
        },
        {
            "id": "2021/02/on-learning-and-stupid-questions",
            "content_html": "<p>There is an artist and puzzle-maker named <a href=\"https://www.abrahampiper.com/\">Abraham Piper</a> who I discovered because of his <a href=\"https://www.tiktok.com/@abrahampiper\">Tik Toks</a>.</p>\n<p>He covers lots of fun stuff like words, religion, philosopy, the meaningless of life (and why it's OK).</p>\n<p>But my <a href=\"https://www.tiktok.com/@abrahampiper/video/6918391576058154246\">absolute favorite video</a> is about learning and \"stupid questions.\"</p>\n<p>My apologies to Abraham if I don't get this exactly right, but here's what I took away from it.</p>\n<p>Think about every single thing that you currently know.</p>\n<p>At some point in your life, you didn't know each one of those things. And, for each one of those things, there is a precise moment when you learned each one.</p>\n<p>So don't be ashamed of not knowing something. Be proud of yourself for taking the steps to learn it!</p>\n<p>And don't look down on someone for not knowing something and trying to learn it. Just because you knew whatever it was before them doesn't make you better or smarter</p>\n",
            "url": "2021/02/on-learning-and-stupid-questions",
            "title": "On learning and stupid questions",
            "summary": "<p>There is an artist and puzzle-maker named <a href=\"https://www.abrahampiper.com/\">Abraham Piper</a> who I discovered because of his <a href=\"https://www.tiktok.com/@abrahampiper\">Tik Toks</a>.</p>\n<p>He covers lots of fun stuff like words, religion, philosopy, the meaningless of life (and why it's OK).</p>\n<p>But my <a href=\"https://www.tiktok.com/@abrahampiper/video/6918391576058154246\">absolute favorite video</a> is about learning and \"stupid questions.\"</p>\n<p>My apologies to Abraham if I don't get this exactly right, but here's what I took away from it.</p>\n<p>Think about every single thing that you currently know.</p>\n<p>At some point in your life, you didn't know each one of those things. And, for each one of those things, there is a precise moment when you learned each one.</p>\n<p>So don't be ashamed of not knowing something. Be proud of yourself for taking the steps to learn it!</p>\n<p>And don't look down on someone for not knowing something and trying to learn it. Just because you knew whatever it was before them doesn't make you better or smarter</p>\n",
            "date_modified": "2021-02-13T00:07:00.000Z",
            "author": {
                "name": "Mark Biek",
                "url": "https://mark.biek.org/"
            }
        },
        {
            "id": "2020/10/learning-about-typescript-interfaces",
            "content_html": "<p>We did our first major <a href=\"https://via.studio\">work project</a> using TypeScript and it's been pretty great. So great, I've decided to use it on my latest side-project as an additional learning opportunity.</p>\n<p>One thing that confused me a bit at first was the difference between <a href=\"https://www.typescriptlang.org/docs/handbook/interfaces.html\">Interfaces</a> and simple types.</p>\n<p>For example, let's say I have a simple type like this</p>\n<pre><code>type Record = {\n\tname: string;\n\tvalue: string;\n\tnum: number;\n};\n</code></pre>\n<p>That's pretty straightfoward. I can declare a variable like this</p>\n<pre><code>const record: Record = {\n\tname: 'foo',\n\tvalue: 'bar',\n\tnum: 100\n};\n</code></pre>\n<p>and I'll get helpful errors if I set an invalid property or value.</p>\n<p>The problem now is that I can't reference any properties of <code>record</code> by index!</p>\n<pre><code>for (const k in record) {\n\tif (record.hasOwnProperty(k)) {\n\t\tconsole.log(record[k]);\n\t}\n}\n</code></pre>\n<p>The above will give me a TS error like <code>No index signature with a parameter of type 'string' was found on type Record</code>.</p>\n<p>This is where Interfaces come in handy. With an Interface, I can explicitly type how an object can be indexed.</p>\n<pre><code>interface IRecord {\n\t[index: string]: number | string;\n}\n</code></pre>\n<p>This simple interface says that I can index my object using a string (and nothing else! indexing by numeric index will throw an error). It also says possible return values can be numbers or strings (since those are the possible types of my current properties).</p>\n<p>It's a good start, but I still don't have anything preventing me from assigning random properties or properties of invalid types on my object.</p>\n<p>Luckily, Interfaces let you specify properties just like the simple <code>type</code> I defined in the beginning.</p>\n<pre><code>interface IRecord {\n\t[index: string]: number | string;\n\n\tname: string;\n\tvalue: string;\n\tnum: number;\n}\n</code></pre>\n<p>Now I can define my record object as <code>const record: IRecord</code>, my object properties are typed, <em>and</em> I can index the object by string.</p>\n",
            "url": "2020/10/learning-about-typescript-interfaces",
            "title": "Learning about TypeScript interfaces",
            "summary": "<p>We did our first major <a href=\"https://via.studio\">work project</a> using TypeScript and it's been pretty great. So great, I've decided to use it on my latest side-project as an additional learning opportunity.</p>\n<p>One thing that confused me a bit at first was the difference between <a href=\"https://www.typescriptlang.org/docs/handbook/interfaces.html\">Interfaces</a> and simple types.</p>\n<p>For example, let's say I have a simple type like this</p>\n<pre><code>type Record = {\n\tname: string;\n\tvalue: string;\n\tnum: number;\n};\n</code></pre>\n<p>That's pretty straightfoward. I can declare a variable like this</p>\n<pre><code>const record: Record = {\n\tname: 'foo',\n\tvalue: 'bar',\n\tnum: 100\n};\n</code></pre>\n<p>and I'll get helpful errors if I set an invalid property or value.</p>\n<p>The problem now is that I can't reference any properties of <code>record</code> by index!</p>\n<pre><code>for (const k in record) {\n\tif (record.hasOwnProperty(k)) {\n\t\tconsole.log(record[k]);\n\t}\n}\n</code></pre>\n<p>The above will give me a TS error like <code>No index signature with a parameter of type 'string' was found on type Record</code>.</p>\n<p>This is where Interfaces come in handy. With an Interface, I can explicitly type how an object can be indexed.</p>\n<pre><code>interface IRecord {\n\t[index: string]: number | string;\n}\n</code></pre>\n<p>This simple interface says that I can index my object using a string (and nothing else! indexing by numeric index will throw an error). It also says possible return values can be numbers or strings (since those are the possible types of my current properties).</p>\n<p>It's a good start, but I still don't have anything preventing me from assigning random properties or properties of invalid types on my object.</p>\n<p>Luckily, Interfaces let you specify properties just like the simple <code>type</code> I defined in the beginning.</p>\n<pre><code>interface IRecord {\n\t[index: string]: number | string;\n\n\tname: string;\n\tvalue: string;\n\tnum: number;\n}\n</code></pre>\n<p>Now I can define my record object as <code>const record: IRecord</code>, my object properties are typed, <em>and</em> I can index the object by string.</p>\n",
            "date_modified": "2020-10-23T00:49:00.000Z",
            "author": {
                "name": "Mark Biek",
                "url": "https://mark.biek.org/"
            }
        }
    ]
}