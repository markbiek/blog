<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Mark Biek - Blog</title>
        <link>https://mark.biek.org/</link>
        <description></description>
        <lastBuildDate>Mon, 07 Aug 2023 15:30:26 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>Feed for Mark Biek's Blog</generator>
        <image>
            <title>Mark Biek - Blog</title>
            <url>https://static.biek.org/blog/img/mark-in-code.png</url>
            <link>https://mark.biek.org/</link>
        </image>
        <copyright>All rights reserved 2023, Mark Biek</copyright>
        <item>
            <title><![CDATA[Let's Talk About AI]]></title>
            <link>https://mark.biek.org//2023/05/lets-talk-about-ai</link>
            <guid>https://mark.biek.org//2023/05/lets-talk-about-ai</guid>
            <pubDate>Wed, 03 May 2023 18:13:18 GMT</pubDate>
            <description><![CDATA[<h3>Let's talk about AI</h3>
<p>Obviously AI chat bots (like ChatGPT, Bing AI, Google Bard, etc) are the hotness for 2023. There's a lot of discussion about the ways AI is going to affect work, education, and society at large.</p>
<p>Will it help bridge the divides created by the Internet and social media? Or will it just make things worse? Are jobs going to disappear because of AI? If so, which jobs? Will software development become a thing of the past? How will AI transform education (or not)?</p>
<h3>AI in Education</h3>
<p>The article <a href="https://biblioracle.substack.com/p/chatgpt-cant-kill-anything-worth">ChatGPT Can't Kill Anything Worth Preserving</a> is my favorite take on ChatGPT in education. Please go and read this article, then go back and read it again.</p>
<p>The short version is, if your students can do entire assignments you've given them using ChatGPT, you're assigning crappy assignments. That said, we want to be careful and intentional about <em>how</em> we let AI do things for us.</p>
<p>While I find Paul Graham to be hit or miss (love his <a href="http://paulgraham.com/writing44.html">stuff on writing</a>), I definitely think this <a href="https://twitter.com/paulg/status/1655925905527537666">Twitter thread</a> brings up a lot of important points about AI and writing.</p>
<p>If you don't want to read the whole thread, just read this quote:</p>
<blockquote>
<p>I'm not warning about the switch to AI in the hope of averting it, but to warn the few people who care enough to save themselves, or their kids. Learn to use AI. It's a powerful technology, and you should know how to use it. But also learn how to write.</p>
</blockquote>
<p>I think ChatGPT and its ilk have the power to radically transform education for the better. I don't know of a single teenager who adores school anymore. Maybe these new tools can take away the busy-work they get buried in and let them get back to the joy and process of learning.</p>
<p>The question is, how can we fit new tools like AI into a broken and underfunded education system? My fear is that these tools will only be used by the schools with the most money. In the US, that means that private schools will reap the benefits long before public schools and only widen the education gap.</p>
<h3>Bing Search</h3>
<p>Microsoft <a href="https://blogs.microsoft.com/blog/2023/02/07/reinventing-search-with-a-new-ai-powered-microsoft-bing-and-edge-your-copilot-for-the-web/">announced</a> a new AI-powered version of Bing and the initial reviews of it are a bit...unhinged.</p>
<ul>
<li><a href="https://simonwillison.net/2023/Feb/15/bing/">Bing: "I will not harm you unless you harm me first"</a>.</li>
<li><a href="https://dkb.blog/p/bing-ai-cant-be-trusted">Bing AI Can't be Trusted</a></li>
</ul>
<p>The short version is that Bing just makes stuff up. It takes all of this information from different sources and uses to answer questions with total nonsense. To be fair, ChatGPT can and does do the same thing. But ChatGPT isn't posing as <strong>A SEARCH ENGINE</strong>.</p>
<p>On the surface, some of Bing AI's behavior is funny but the thought of people using it to, say, <a href="https://dkb.blog/i/102643499/gap-financial-statement-summary">get financial information</a> (or political details or anything of important) is terrifying.</p>
<p>Most of the people using this are going to take the information from different AI-powered systems as absolute fact. As AI generated video gets better and better, this has far reaching and dangerous consequences for news media. In the end, my biggest fear is that this just becomes another avenue (or maybe THE avenue) for dangerous, false information to spread online.</p>
<p>It's not all doom and gloom though. When used properly, things like ChatGPT can definitely be a productivity multiplier.</p>
<h2>Recent things I've used ChatGPT for</h2>
<p>I don't think that AI is going to do away with software development. But I <em>do</em> think that software developers who know how to leverage AI are going to have an advantage in the job market. Just like good Internet searches are a skill, so is writing good ChatGPT prompts.</p>
<p>It'll be interesting to see how this changes the shape of <em>learning</em> software development though. I think AI will be a great learning resource. But, like anything else, be careful that you're not using AI as too much of a crutch. Use it to augment and refine what you're learning, but make sure you're still learning all the core concepts.</p>
<p>Here are a handful of things, personal and professional, that ChatGPT was super helpful with.</p>
<h3>A dice roller</h3>
<p>It's slow-ish but, in a pinch, you can ask ChatGPT to roll dice for you.</p>
<pre><code>> üßç Can you be a dice roller?
> ü§ñ Yes, I can be a virtual dice roller. What kind of dice would you like me to roll for you?
> üßç 3d8
> ü§ñ Certainly! Here are your 3 rolls of an 8-sided die:
> ü§ñ Roll 1: 6
> ü§ñ Roll 2: 2
> ü§ñ Roll 3: 8
</code></pre>
<p>I won't try to speak to how good the randomness is. It's probably insufficient for anything security-related but should be fine for a game.</p>
<h3>Automation script using simple-git and Inquirer.js.</h3>
<p>I needed to write an automation script using <a href="https://github.com/simple-git-js/simple-git">simple-git</a> (for git operations) and <a href="https://github.com/SBoudrias/Inquirer.js">Inquirer.js</a> (for nice user prompts).</p>
<pre><code>> üßç Can you read the documentation for the libraries https://github.com/simple-git-js/simple-git and https://github.com/SBoudrias/Inquirer.js?
> ü§ñ Yes, I can read the documentation for those libraries. Would you like me to provide you with a summary or answer any specific questions?
> üßç I have specific questions.
> ü§ñ Please go ahead and ask your questions.
> üßç How would I use simple-git to check the git status of the current directory?
</code></pre>
<p>The first response was accurate (and useful) because it broke down the steps of creating a new simple-git instance and calling <code>git.status</code>. The only problem was that it used Promises and callbacks.</p>
<p>So then I asked</p>
<pre><code>> üßç Can you rewrite that using async/await?
> ü§ñ Sure! Here's how you can use async/await to check the git status of the current directory using the simple-git library:
</code></pre>
<pre><code>const simpleGit = require('simple-git');

async function getStatus() {
  try {
    const git = simpleGit();
    const status = await git.status();
    console.log(status);
  } catch (err) {
    console.error(err);
  }
}

getStatus();
</code></pre>
<p>I kept periodically asking ChatGPT to provide code snippets of various actions using the two libraries. It often forgot that I wanted <code>async/await</code> code or that I was using ESM (<code>import whatever from 'whatever'</code>) instead of CommonJS (<code>const whatever = require('whatever')</code>) but I either asked it to rewrite the code or just tweaked it myself.</p>
<p>There were a number of cases where I didn't like the code it generated and refactored it or wrote it differently. Either way, it still saved me a ton of time trying to figure out how to use the libraries.</p>
<h3>Comparing raw tables of data.</h3>
<p>I had two spreadsheets of pricing data for different currencies that I need to compare and double-check. I was concerned about duplicate rows and mismatched values. As an added bonus, I didn't even have to format the data. I just copied straight from Google Sheets into ChatGPT.</p>
<p>In reality, these spreadsheets were quite large but I can demonstrate how ChatGPT helped using a smaller dataset.</p>
<pre><code>> üßç I'm going to give you a table of currencies and prices
> 
> üßç currency,price
> üßç AUD,100
> üßç EUR,200
> üßç USD,300
>
> ü§ñ Thank you for providing me with the table of currencies and prices. Is there anything specific you would like me to do with this information, or do you have any questions regarding currencies and exchange rates?
> 
> üßç I'm going to give you another table. Can you tell me if all the prices for each currency match the first table?
> 
> üßç currency,price
> üßç USD 400
> üßç USD 300
> üßç EUR 200
> üßç AUD 100
>
> ü§ñ Sure. Here's a comparison of the two tables. As we can see, the prices for AUD and EUR match in both tables, but the prices for USD differ. In the first table, the price for USD is 300, whereas in the second table, there are two prices for USD, 300 and 400.
</code></pre>
<h3>Writing TypeScript stuff.</h3>
<p>My TypeScript knowledge is OK but not great. I've found a number of cases where ChatGPT gave me better answers than a regular Internet search.</p>
<pre><code>> üßç Let's say I have this type
> üßç export type MaximumFootnotes = '1' | '2' | '3' | '4' | '5';
> üßç How can I make a new object type that only allows keys that are the values in MaximumFootnotes but doesn't require all of them?
> 
> ü§ñ Here's an example of how you can define a new object type MyFootnotes that allows keys that are values in MaximumFootnotes, but doesn't require all of them:
</code></pre>
<pre><code>export type MaximumFootnotes = '1' | '2' | '3' | '4' | '5';

type MyFootnotes = {
  [key in MaximumFootnotes]?: string;
};
</code></pre>
<h3>Generating repeated blocks of code.</h3>
<p>This is something that Github CoPilot does well with sometimes. My only complaint there is it often takes a while for Github Copilot to figure out what I'm doing.</p>
<p>As an experiment, I tried using ChatGPT to do it in the following manner</p>
<pre><code>> üßç I'm going to give you a list of Javascript constants. For each constant, give me code with the following structure and use the comment at the end of the line as the return value for the getTitle function
</code></pre>
<pre><code>export [ MY_CONSTANT ]: {
	getConstant: () => MY_CONSTANT,
	getTitle: () => translate('TITLE'),
}
</code></pre>
<pre><code>> ü§ñ Sure, I'd be happy to help you with that. Please provide me with the list of Javascript constants.
</code></pre>
<pre><code>export const FOO = 'foo'; // This is foo
export const BAR = 'bar'; // This is bar
export const BAZ = 'baz'; // This is baz
</code></pre>
<pre><code>> ü§ñ Here is the code structure you requested for the given constants:
</code></pre>
<pre><code>export [ FOO ]: {
	getConstant: () => FOO,
	getTitle: () => translate('This is foo'),
}
export [ BAR ]: {
	getConstant: () => BAR,
	getTitle: () => translate('This is bar'),
}
export [ BAZ ]: {
	getConstant: () => BAZ,
	getTitle: () => translate('This is baz'),
}
</code></pre>
<pre><code>> üßç Now give me the Javascript import statement for all of the constants.
>
> ü§ñ Sure, here's the import statement for all the constants:
</code></pre>
<pre><code>import {
	FOO,
	BAR,
	BAZ
} from './constants';
</code></pre>
<h3>Generating a triage schedule.</h3>
<p>We needed a schedule for my team where each person was in charge of triaging incoming issues for two weeks.</p>
<pre><code>> üßç I'm going to give you a comma-separated list of names. Please put the list in random order starting with Mark and ending with Alice?
> Mark, Alice, Beth, Charlie, David, Eddie
>
> ü§ñ Sure, here are the names in a randomized order starting with Mark and ending with Alice:
> ü§ñ Mark, Beth, David, Eddie, Charlie, Alice.
>
> üßç Using that order, give me a 6 month schedule where each person is in charge for two week.
>
> ü§ñ Sure, here is a 6-month schedule starting with Mark and ending with Alice, where each person is in charge for two weeks:
> ü§ñ Mar 27 - Apr 9: Mark
> ü§ñ Apr 10 - Apr 23: Beth
> ü§ñ Apr 24 - May 7: David
> ü§ñ May 8 - May 21: Eddie
> ü§ñ May 22 - Jun 4: Charlie
> ü§ñ Jun 5 - Jun 18: Alice
> ü§ñ Jun 19 - Jul 2: Mark
> ü§ñ Jul 3 - Jul 16: Beth
> ü§ñ Jul 17 - Jul 30: David
> ü§ñ Jul 31 - Aug 13: Eddie
> ü§ñ Aug 14 - Aug 27: Charlie
> ü§ñ Aug 28 - Sep 10: Beth
</code></pre>
<h3>SQL queries.</h3>
<p>I have a personal project that's a web-based image gallery. Images can be assigned any number of tags. I've been working on a feature that lets you query all images that have one or more tags (eg <code>/tags/pets+cute</code>) and was feeling lazy coming up with the SQL query.</p>
<pre><code>> üßç Write a sql query which shows all images that have all of the specified tag ids.
>
> ü§ñ To find all images that have all of the specified tag IDs, you can use the following query:
</code></pre>
<pre><code>SELECT i.*
FROM images i
JOIN image_tags it ON i.id = it.image_id
WHERE it.tag_id IN (tag_id_1, tag_id_2, ..., tag_id_n)
GROUP BY i.id
HAVING COUNT(*) = n
</code></pre>
]]></description>
            <content:encoded><![CDATA[<h3>Let's talk about AI</h3>
<p>Obviously AI chat bots (like ChatGPT, Bing AI, Google Bard, etc) are the hotness for 2023. There's a lot of discussion about the ways AI is going to affect work, education, and society at large.</p>
<p>Will it help bridge the divides created by the Internet and social media? Or will it just make things worse? Are jobs going to disappear because of AI? If so, which jobs? Will software development become a thing of the past? How will AI transform education (or not)?</p>
<h3>AI in Education</h3>
<p>The article <a href="https://biblioracle.substack.com/p/chatgpt-cant-kill-anything-worth">ChatGPT Can't Kill Anything Worth Preserving</a> is my favorite take on ChatGPT in education. Please go and read this article, then go back and read it again.</p>
<p>The short version is, if your students can do entire assignments you've given them using ChatGPT, you're assigning crappy assignments. That said, we want to be careful and intentional about <em>how</em> we let AI do things for us.</p>
<p>While I find Paul Graham to be hit or miss (love his <a href="http://paulgraham.com/writing44.html">stuff on writing</a>), I definitely think this <a href="https://twitter.com/paulg/status/1655925905527537666">Twitter thread</a> brings up a lot of important points about AI and writing.</p>
<p>If you don't want to read the whole thread, just read this quote:</p>
<blockquote>
<p>I'm not warning about the switch to AI in the hope of averting it, but to warn the few people who care enough to save themselves, or their kids. Learn to use AI. It's a powerful technology, and you should know how to use it. But also learn how to write.</p>
</blockquote>
<p>I think ChatGPT and its ilk have the power to radically transform education for the better. I don't know of a single teenager who adores school anymore. Maybe these new tools can take away the busy-work they get buried in and let them get back to the joy and process of learning.</p>
<p>The question is, how can we fit new tools like AI into a broken and underfunded education system? My fear is that these tools will only be used by the schools with the most money. In the US, that means that private schools will reap the benefits long before public schools and only widen the education gap.</p>
<h3>Bing Search</h3>
<p>Microsoft <a href="https://blogs.microsoft.com/blog/2023/02/07/reinventing-search-with-a-new-ai-powered-microsoft-bing-and-edge-your-copilot-for-the-web/">announced</a> a new AI-powered version of Bing and the initial reviews of it are a bit...unhinged.</p>
<ul>
<li><a href="https://simonwillison.net/2023/Feb/15/bing/">Bing: "I will not harm you unless you harm me first"</a>.</li>
<li><a href="https://dkb.blog/p/bing-ai-cant-be-trusted">Bing AI Can't be Trusted</a></li>
</ul>
<p>The short version is that Bing just makes stuff up. It takes all of this information from different sources and uses to answer questions with total nonsense. To be fair, ChatGPT can and does do the same thing. But ChatGPT isn't posing as <strong>A SEARCH ENGINE</strong>.</p>
<p>On the surface, some of Bing AI's behavior is funny but the thought of people using it to, say, <a href="https://dkb.blog/i/102643499/gap-financial-statement-summary">get financial information</a> (or political details or anything of important) is terrifying.</p>
<p>Most of the people using this are going to take the information from different AI-powered systems as absolute fact. As AI generated video gets better and better, this has far reaching and dangerous consequences for news media. In the end, my biggest fear is that this just becomes another avenue (or maybe THE avenue) for dangerous, false information to spread online.</p>
<p>It's not all doom and gloom though. When used properly, things like ChatGPT can definitely be a productivity multiplier.</p>
<h2>Recent things I've used ChatGPT for</h2>
<p>I don't think that AI is going to do away with software development. But I <em>do</em> think that software developers who know how to leverage AI are going to have an advantage in the job market. Just like good Internet searches are a skill, so is writing good ChatGPT prompts.</p>
<p>It'll be interesting to see how this changes the shape of <em>learning</em> software development though. I think AI will be a great learning resource. But, like anything else, be careful that you're not using AI as too much of a crutch. Use it to augment and refine what you're learning, but make sure you're still learning all the core concepts.</p>
<p>Here are a handful of things, personal and professional, that ChatGPT was super helpful with.</p>
<h3>A dice roller</h3>
<p>It's slow-ish but, in a pinch, you can ask ChatGPT to roll dice for you.</p>
<pre><code>> üßç Can you be a dice roller?
> ü§ñ Yes, I can be a virtual dice roller. What kind of dice would you like me to roll for you?
> üßç 3d8
> ü§ñ Certainly! Here are your 3 rolls of an 8-sided die:
> ü§ñ Roll 1: 6
> ü§ñ Roll 2: 2
> ü§ñ Roll 3: 8
</code></pre>
<p>I won't try to speak to how good the randomness is. It's probably insufficient for anything security-related but should be fine for a game.</p>
<h3>Automation script using simple-git and Inquirer.js.</h3>
<p>I needed to write an automation script using <a href="https://github.com/simple-git-js/simple-git">simple-git</a> (for git operations) and <a href="https://github.com/SBoudrias/Inquirer.js">Inquirer.js</a> (for nice user prompts).</p>
<pre><code>> üßç Can you read the documentation for the libraries https://github.com/simple-git-js/simple-git and https://github.com/SBoudrias/Inquirer.js?
> ü§ñ Yes, I can read the documentation for those libraries. Would you like me to provide you with a summary or answer any specific questions?
> üßç I have specific questions.
> ü§ñ Please go ahead and ask your questions.
> üßç How would I use simple-git to check the git status of the current directory?
</code></pre>
<p>The first response was accurate (and useful) because it broke down the steps of creating a new simple-git instance and calling <code>git.status</code>. The only problem was that it used Promises and callbacks.</p>
<p>So then I asked</p>
<pre><code>> üßç Can you rewrite that using async/await?
> ü§ñ Sure! Here's how you can use async/await to check the git status of the current directory using the simple-git library:
</code></pre>
<pre><code>const simpleGit = require('simple-git');

async function getStatus() {
  try {
    const git = simpleGit();
    const status = await git.status();
    console.log(status);
  } catch (err) {
    console.error(err);
  }
}

getStatus();
</code></pre>
<p>I kept periodically asking ChatGPT to provide code snippets of various actions using the two libraries. It often forgot that I wanted <code>async/await</code> code or that I was using ESM (<code>import whatever from 'whatever'</code>) instead of CommonJS (<code>const whatever = require('whatever')</code>) but I either asked it to rewrite the code or just tweaked it myself.</p>
<p>There were a number of cases where I didn't like the code it generated and refactored it or wrote it differently. Either way, it still saved me a ton of time trying to figure out how to use the libraries.</p>
<h3>Comparing raw tables of data.</h3>
<p>I had two spreadsheets of pricing data for different currencies that I need to compare and double-check. I was concerned about duplicate rows and mismatched values. As an added bonus, I didn't even have to format the data. I just copied straight from Google Sheets into ChatGPT.</p>
<p>In reality, these spreadsheets were quite large but I can demonstrate how ChatGPT helped using a smaller dataset.</p>
<pre><code>> üßç I'm going to give you a table of currencies and prices
> 
> üßç currency,price
> üßç AUD,100
> üßç EUR,200
> üßç USD,300
>
> ü§ñ Thank you for providing me with the table of currencies and prices. Is there anything specific you would like me to do with this information, or do you have any questions regarding currencies and exchange rates?
> 
> üßç I'm going to give you another table. Can you tell me if all the prices for each currency match the first table?
> 
> üßç currency,price
> üßç USD 400
> üßç USD 300
> üßç EUR 200
> üßç AUD 100
>
> ü§ñ Sure. Here's a comparison of the two tables. As we can see, the prices for AUD and EUR match in both tables, but the prices for USD differ. In the first table, the price for USD is 300, whereas in the second table, there are two prices for USD, 300 and 400.
</code></pre>
<h3>Writing TypeScript stuff.</h3>
<p>My TypeScript knowledge is OK but not great. I've found a number of cases where ChatGPT gave me better answers than a regular Internet search.</p>
<pre><code>> üßç Let's say I have this type
> üßç export type MaximumFootnotes = '1' | '2' | '3' | '4' | '5';
> üßç How can I make a new object type that only allows keys that are the values in MaximumFootnotes but doesn't require all of them?
> 
> ü§ñ Here's an example of how you can define a new object type MyFootnotes that allows keys that are values in MaximumFootnotes, but doesn't require all of them:
</code></pre>
<pre><code>export type MaximumFootnotes = '1' | '2' | '3' | '4' | '5';

type MyFootnotes = {
  [key in MaximumFootnotes]?: string;
};
</code></pre>
<h3>Generating repeated blocks of code.</h3>
<p>This is something that Github CoPilot does well with sometimes. My only complaint there is it often takes a while for Github Copilot to figure out what I'm doing.</p>
<p>As an experiment, I tried using ChatGPT to do it in the following manner</p>
<pre><code>> üßç I'm going to give you a list of Javascript constants. For each constant, give me code with the following structure and use the comment at the end of the line as the return value for the getTitle function
</code></pre>
<pre><code>export [ MY_CONSTANT ]: {
	getConstant: () => MY_CONSTANT,
	getTitle: () => translate('TITLE'),
}
</code></pre>
<pre><code>> ü§ñ Sure, I'd be happy to help you with that. Please provide me with the list of Javascript constants.
</code></pre>
<pre><code>export const FOO = 'foo'; // This is foo
export const BAR = 'bar'; // This is bar
export const BAZ = 'baz'; // This is baz
</code></pre>
<pre><code>> ü§ñ Here is the code structure you requested for the given constants:
</code></pre>
<pre><code>export [ FOO ]: {
	getConstant: () => FOO,
	getTitle: () => translate('This is foo'),
}
export [ BAR ]: {
	getConstant: () => BAR,
	getTitle: () => translate('This is bar'),
}
export [ BAZ ]: {
	getConstant: () => BAZ,
	getTitle: () => translate('This is baz'),
}
</code></pre>
<pre><code>> üßç Now give me the Javascript import statement for all of the constants.
>
> ü§ñ Sure, here's the import statement for all the constants:
</code></pre>
<pre><code>import {
	FOO,
	BAR,
	BAZ
} from './constants';
</code></pre>
<h3>Generating a triage schedule.</h3>
<p>We needed a schedule for my team where each person was in charge of triaging incoming issues for two weeks.</p>
<pre><code>> üßç I'm going to give you a comma-separated list of names. Please put the list in random order starting with Mark and ending with Alice?
> Mark, Alice, Beth, Charlie, David, Eddie
>
> ü§ñ Sure, here are the names in a randomized order starting with Mark and ending with Alice:
> ü§ñ Mark, Beth, David, Eddie, Charlie, Alice.
>
> üßç Using that order, give me a 6 month schedule where each person is in charge for two week.
>
> ü§ñ Sure, here is a 6-month schedule starting with Mark and ending with Alice, where each person is in charge for two weeks:
> ü§ñ Mar 27 - Apr 9: Mark
> ü§ñ Apr 10 - Apr 23: Beth
> ü§ñ Apr 24 - May 7: David
> ü§ñ May 8 - May 21: Eddie
> ü§ñ May 22 - Jun 4: Charlie
> ü§ñ Jun 5 - Jun 18: Alice
> ü§ñ Jun 19 - Jul 2: Mark
> ü§ñ Jul 3 - Jul 16: Beth
> ü§ñ Jul 17 - Jul 30: David
> ü§ñ Jul 31 - Aug 13: Eddie
> ü§ñ Aug 14 - Aug 27: Charlie
> ü§ñ Aug 28 - Sep 10: Beth
</code></pre>
<h3>SQL queries.</h3>
<p>I have a personal project that's a web-based image gallery. Images can be assigned any number of tags. I've been working on a feature that lets you query all images that have one or more tags (eg <code>/tags/pets+cute</code>) and was feeling lazy coming up with the SQL query.</p>
<pre><code>> üßç Write a sql query which shows all images that have all of the specified tag ids.
>
> ü§ñ To find all images that have all of the specified tag IDs, you can use the following query:
</code></pre>
<pre><code>SELECT i.*
FROM images i
JOIN image_tags it ON i.id = it.image_id
WHERE it.tag_id IN (tag_id_1, tag_id_2, ..., tag_id_n)
GROUP BY i.id
HAVING COUNT(*) = n
</code></pre>
]]></content:encoded>
            <author>info@biek.org (Mark Biek)</author>
        </item>
        <item>
            <title><![CDATA[Learning a Large System]]></title>
            <link>https://mark.biek.org//2022/12/learning-a-large-system</link>
            <guid>https://mark.biek.org//2022/12/learning-a-large-system</guid>
            <pubDate>Thu, 01 Dec 2022 18:18:00 GMT</pubDate>
            <description><![CDATA[<p>Starting work in a large, existing system is very much like trying to find your way around a very dark and very cluttered warehouse.</p>
<p>When you start, your flashlight is very small (if you even <em>have</em> a flashlight). You can only see tiny pieces of the room at a time. Nothing really makes sense and you have no sense of how any of the piles of clutter are related to each other.</p>
<p>After spending some time poking around the warehouse, you get to upgrade your flashlight. You can start to see more swaths of the room and once and can even infer a little bit about how different piles work together. But this is where it gets tricky. It's easy to make false assumptions about the parts you're seeing when the reality is still hidden in the darkness.</p>
<p>And the process continues like this as time goes by.</p>
<p>You get bigger flashlights and can see more of the room.</p>
<p>Spend enough time and you may even get to turn on some overhead lights.</p>
<p>If the system isn't <em>too</em> huge, you may someday turn on all the lights and can see the whole room at once. But you may never get to that point if the system is massive enough.</p>
<p>You may have a section of the room that you're most familiar with while someone else may know about other parts. This is great because then you can ask each other about what is in each pile of clutter.</p>
<p>In that case, you and everyone else in the room has to rely on each other.</p>
]]></description>
            <content:encoded><![CDATA[<p>Starting work in a large, existing system is very much like trying to find your way around a very dark and very cluttered warehouse.</p>
<p>When you start, your flashlight is very small (if you even <em>have</em> a flashlight). You can only see tiny pieces of the room at a time. Nothing really makes sense and you have no sense of how any of the piles of clutter are related to each other.</p>
<p>After spending some time poking around the warehouse, you get to upgrade your flashlight. You can start to see more swaths of the room and once and can even infer a little bit about how different piles work together. But this is where it gets tricky. It's easy to make false assumptions about the parts you're seeing when the reality is still hidden in the darkness.</p>
<p>And the process continues like this as time goes by.</p>
<p>You get bigger flashlights and can see more of the room.</p>
<p>Spend enough time and you may even get to turn on some overhead lights.</p>
<p>If the system isn't <em>too</em> huge, you may someday turn on all the lights and can see the whole room at once. But you may never get to that point if the system is massive enough.</p>
<p>You may have a section of the room that you're most familiar with while someone else may know about other parts. This is great because then you can ask each other about what is in each pile of clutter.</p>
<p>In that case, you and everyone else in the room has to rely on each other.</p>
]]></content:encoded>
            <author>info@biek.org (Mark Biek)</author>
        </item>
        <item>
            <title><![CDATA[Advice from a software-development old head]]></title>
            <link>https://mark.biek.org//2022/07/advice-from-an-old-head</link>
            <guid>https://mark.biek.org//2022/07/advice-from-an-old-head</guid>
            <pubDate>Thu, 14 Jul 2022 15:06:00 GMT</pubDate>
            <description><![CDATA[<p>After 25 years working as a software developer, I've been thinking a lot about the things that have been the most important over the course of my career. The interesting pattern I've noticed is that most of these things aren't unique to software development at all. You could easily apply them to just about anything.</p>
<h1>Curiosity is your friend</h1>
<ul>
<li>Always wonder about things.</li>
<li>Wonder how things work.</li>
<li>Wonder <em>why</em> they work the way they do.</li>
<li>Explore! Try to see things that other people aren't seeing.</li>
</ul>
<h1>Never stop learning</h1>
<ul>
<li>Fall in love with learning new things.</li>
<li>Fall in love with learning more about things you already know.</li>
<li>Get good at the process of learning so you can learn more things faster!</li>
</ul>
<h1>Communication is key</h1>
<ul>
<li>We don't do work in a vacuum. Being able to communicate your ideas to others is paramount.</li>
<li>Learn to writing clearly and simply.
<ul>
<li>The <a href="https://fieldguide.automattic.com/the-automattic-style-guide/">Automattic Style Guide</a> is a good compilation of resources.</li>
</ul>
</li>
<li>
<blockquote>
<p>"Programs are meant to be read by humans and only incidentally for computers to execute." - Donald Knuth</p>
</blockquote>
</li>
</ul>
<h1>Master your tools</h1>
<ul>
<li>Learn the ins and outs and full capabilities of your tools. Nothing makes work faster than efficient tool use.
<ul>
<li><a href="https://code.visualstudio.com/docs">Visual Studio Code docs</a></li>
<li><a href="https://vimhelp.org/">Vim help</a></li>
</ul>
</li>
<li>Collect keyboard shortcuts for all the programs you use. Make it a game where you lose points when you touch the mouse. Write the shortcuts on post-its stuck to your monitor to help you remember.
<ul>
<li><a href="https://www.alfredapp.com/">AlfredApp</a></li>
<li><a href="https://support.apple.com/en-us/HT201236">OSX shortcuts</a></li>
</ul>
</li>
<li>Get good at the command-line. At a minimum, get comfortable manipulating files and strings from the cli.
<ul>
<li><a href="https://ubuntu.com/tutorials/command-line-for-beginners#1-overview">Beginner's guide to the cli</a></li>
</ul>
</li>
</ul>
<h1>Get good at searching</h1>
<p>There's to much stuff to remember so you're going to spend a lot of time trying to find what you need.</p>
<h2>Searching for information</h2>
<p>Get good at searching the Internet.</p>
<ul>
<li>You need to be able to track down the source of error messages.</li>
<li>There will be things you don't know how to do and other people have already done them. Learn how to find those details!</li>
</ul>
<h2>Searching Code</h2>
<p>How do you know where the code you need to change lives? You have to search for it!</p>
<ul>
<li>Your editor probably has all kinds of fancy search tools. Learn how to use them.</li>
<li>Learn cli search tools (<code>grep</code>, <code>ack</code>, <code>ripgrep</code>, etc). There are lots of them.
<ul>
<li><a href="https://beyondgrep.com/">ack</a></li>
</ul>
</li>
<li>Learn enough regex to make your searches more efficient.
<ul>
<li><a href="https://regextutorial.org/">Regex tutorial</a></li>
</ul>
</li>
<li>Learn how to trace your way through code. Maybe you need to change the functionality of a button and you don't know where the code is. Start by finding where the button markup is, then trace your way back up through the code.</li>
</ul>
]]></description>
            <content:encoded><![CDATA[<p>After 25 years working as a software developer, I've been thinking a lot about the things that have been the most important over the course of my career. The interesting pattern I've noticed is that most of these things aren't unique to software development at all. You could easily apply them to just about anything.</p>
<h1>Curiosity is your friend</h1>
<ul>
<li>Always wonder about things.</li>
<li>Wonder how things work.</li>
<li>Wonder <em>why</em> they work the way they do.</li>
<li>Explore! Try to see things that other people aren't seeing.</li>
</ul>
<h1>Never stop learning</h1>
<ul>
<li>Fall in love with learning new things.</li>
<li>Fall in love with learning more about things you already know.</li>
<li>Get good at the process of learning so you can learn more things faster!</li>
</ul>
<h1>Communication is key</h1>
<ul>
<li>We don't do work in a vacuum. Being able to communicate your ideas to others is paramount.</li>
<li>Learn to writing clearly and simply.
<ul>
<li>The <a href="https://fieldguide.automattic.com/the-automattic-style-guide/">Automattic Style Guide</a> is a good compilation of resources.</li>
</ul>
</li>
<li>
<blockquote>
<p>"Programs are meant to be read by humans and only incidentally for computers to execute." - Donald Knuth</p>
</blockquote>
</li>
</ul>
<h1>Master your tools</h1>
<ul>
<li>Learn the ins and outs and full capabilities of your tools. Nothing makes work faster than efficient tool use.
<ul>
<li><a href="https://code.visualstudio.com/docs">Visual Studio Code docs</a></li>
<li><a href="https://vimhelp.org/">Vim help</a></li>
</ul>
</li>
<li>Collect keyboard shortcuts for all the programs you use. Make it a game where you lose points when you touch the mouse. Write the shortcuts on post-its stuck to your monitor to help you remember.
<ul>
<li><a href="https://www.alfredapp.com/">AlfredApp</a></li>
<li><a href="https://support.apple.com/en-us/HT201236">OSX shortcuts</a></li>
</ul>
</li>
<li>Get good at the command-line. At a minimum, get comfortable manipulating files and strings from the cli.
<ul>
<li><a href="https://ubuntu.com/tutorials/command-line-for-beginners#1-overview">Beginner's guide to the cli</a></li>
</ul>
</li>
</ul>
<h1>Get good at searching</h1>
<p>There's to much stuff to remember so you're going to spend a lot of time trying to find what you need.</p>
<h2>Searching for information</h2>
<p>Get good at searching the Internet.</p>
<ul>
<li>You need to be able to track down the source of error messages.</li>
<li>There will be things you don't know how to do and other people have already done them. Learn how to find those details!</li>
</ul>
<h2>Searching Code</h2>
<p>How do you know where the code you need to change lives? You have to search for it!</p>
<ul>
<li>Your editor probably has all kinds of fancy search tools. Learn how to use them.</li>
<li>Learn cli search tools (<code>grep</code>, <code>ack</code>, <code>ripgrep</code>, etc). There are lots of them.
<ul>
<li><a href="https://beyondgrep.com/">ack</a></li>
</ul>
</li>
<li>Learn enough regex to make your searches more efficient.
<ul>
<li><a href="https://regextutorial.org/">Regex tutorial</a></li>
</ul>
</li>
<li>Learn how to trace your way through code. Maybe you need to change the functionality of a button and you don't know where the code is. Start by finding where the button markup is, then trace your way back up through the code.</li>
</ul>
]]></content:encoded>
            <author>info@biek.org (Mark Biek)</author>
        </item>
        <item>
            <title><![CDATA[Launching vim from a PHP cli app and reading the output.]]></title>
            <link>https://mark.biek.org//2022/02/php-launch-vim-read-output</link>
            <guid>https://mark.biek.org//2022/02/php-launch-vim-read-output</guid>
            <pubDate>Fri, 25 Feb 2022 15:56:00 GMT</pubDate>
            <description><![CDATA[<p>I've always wondered if it's possible to write a PHP command-line script that launches an editor, lets the user type something, then reads in whatever they type (like a git commit log message).</p>
<p>Turns out, it's pretty straightforward with the <a href="https://symfony.com/doc/current/components/process.html#using-php-streams-as-the-standard-input-of-a-process">Symfony Process</a> component.</p>
<pre><code>&#x3C;?php

require_once __DIR__ . '/vendor/autoload.php';

use Symfony\Component\Process\Process;

// Create a temporary file so the user has something to type into
$edit_file = tempnam(sys_get_temp_dir(), "_log");

// Attempt to load the user's EDITOR from the environment. Default to vim otherwise.
$editor = getenv('EDITOR') !== false ? getenv('EDITOR') : 'vim';

// Launch the editor and open the temp file
// This will pause execution of our script until they save and close the editor.
$process = new Process(['vim', $edit_file]);
$process->setTty(true);
$process->run();

// Read back the data they entered.
$data = file_get_contents($edit_file);
echo "$data\n";

// Clean up after ourselves.
unlink($edit_file);
</code></pre>
]]></description>
            <content:encoded><![CDATA[<p>I've always wondered if it's possible to write a PHP command-line script that launches an editor, lets the user type something, then reads in whatever they type (like a git commit log message).</p>
<p>Turns out, it's pretty straightforward with the <a href="https://symfony.com/doc/current/components/process.html#using-php-streams-as-the-standard-input-of-a-process">Symfony Process</a> component.</p>
<pre><code>&#x3C;?php

require_once __DIR__ . '/vendor/autoload.php';

use Symfony\Component\Process\Process;

// Create a temporary file so the user has something to type into
$edit_file = tempnam(sys_get_temp_dir(), "_log");

// Attempt to load the user's EDITOR from the environment. Default to vim otherwise.
$editor = getenv('EDITOR') !== false ? getenv('EDITOR') : 'vim';

// Launch the editor and open the temp file
// This will pause execution of our script until they save and close the editor.
$process = new Process(['vim', $edit_file]);
$process->setTty(true);
$process->run();

// Read back the data they entered.
$data = file_get_contents($edit_file);
echo "$data\n";

// Clean up after ourselves.
unlink($edit_file);
</code></pre>
]]></content:encoded>
            <author>info@biek.org (Mark Biek)</author>
        </item>
        <item>
            <title><![CDATA[Using jq to filter JSON by regex]]></title>
            <link>https://mark.biek.org//2021/11/using-jq-to-filter-json-by-regex</link>
            <guid>https://mark.biek.org//2021/11/using-jq-to-filter-json-by-regex</guid>
            <pubDate>Wed, 17 Nov 2021 16:04:00 GMT</pubDate>
            <description><![CDATA[<p>If you're not already familiar with using <a href="https://stedolan.github.io/jq/">jq</a> to manipulate JSON on the command-line, go download it immediately. While it can be a little tricky to learn at first, it'll make your life so much easier.</p>
<p>For example, I recently learned how to filter a JSON result set using a regex to match the value of a particular object property.</p>
<p>Let's say I have a JSON payload that looks like this:</p>
<pre><code>{
	"total": 4,
	"domains": [
		{
			"id": 100,
			"account": 999,
			"name": "alice.com",
			"created": "2021-01-01 00:00:00"
		},
		{
			"id": 101,
			"account": 999,
			"name": "bob.com",
			"created": "2021-01-01 00:00:00"
		},
		{
			"id": 102,
			"account": 999,
			"name": "charlie.com",
			"created": "2021-01-01 00:00:00"
		},
		{
			"id": 103,
			"account": 999,
			"name": "eve.com",
			"created": "2021-01-01 00:00:00"
		}
	]
}
</code></pre>
<p>It's super easy to get all of the domain objects using the jq filter <code>.domains[]</code> and it's also trivial to get at only specific fields of each domain object (eg <code>.domains[] | {id,name}</code>).</p>
<p>Now let's say we want to only get the domain object where the name is "charlie.com".</p>
<p>That's where the <a href="https://stedolan.github.io/jq/manual/#select(boolean_expression)">select()</a> and <a href="https://stedolan.github.io/jq/manual/#test(val),test(regex;flags)">test()</a> functions come in.</p>
<p>We can use the following filter to accomplish üëÜÔ∏è:</p>
<p><code>.domains[] | {id,name} | select(.name | test("charlie"))</code></p>
<p><code>select</code> takes a boolean expression and, if that expression is true, returns that particular item. Everything else is filtered out.</p>
<p>The <code>test</code> function takes a regex (or simple string to match). In our particular case, <code>test</code> is checking against the <code>name</code> property of each object.</p>
<p>Now let's saw only want the <code>id</code> <em>value</em> of the object that matches our test.</p>
<p>We simply change our filter to the below:</p>
<p><code>.domains[] | {id,name} | select(.name | test("charlie")) | .id</code></p>
]]></description>
            <content:encoded><![CDATA[<p>If you're not already familiar with using <a href="https://stedolan.github.io/jq/">jq</a> to manipulate JSON on the command-line, go download it immediately. While it can be a little tricky to learn at first, it'll make your life so much easier.</p>
<p>For example, I recently learned how to filter a JSON result set using a regex to match the value of a particular object property.</p>
<p>Let's say I have a JSON payload that looks like this:</p>
<pre><code>{
	"total": 4,
	"domains": [
		{
			"id": 100,
			"account": 999,
			"name": "alice.com",
			"created": "2021-01-01 00:00:00"
		},
		{
			"id": 101,
			"account": 999,
			"name": "bob.com",
			"created": "2021-01-01 00:00:00"
		},
		{
			"id": 102,
			"account": 999,
			"name": "charlie.com",
			"created": "2021-01-01 00:00:00"
		},
		{
			"id": 103,
			"account": 999,
			"name": "eve.com",
			"created": "2021-01-01 00:00:00"
		}
	]
}
</code></pre>
<p>It's super easy to get all of the domain objects using the jq filter <code>.domains[]</code> and it's also trivial to get at only specific fields of each domain object (eg <code>.domains[] | {id,name}</code>).</p>
<p>Now let's say we want to only get the domain object where the name is "charlie.com".</p>
<p>That's where the <a href="https://stedolan.github.io/jq/manual/#select(boolean_expression)">select()</a> and <a href="https://stedolan.github.io/jq/manual/#test(val),test(regex;flags)">test()</a> functions come in.</p>
<p>We can use the following filter to accomplish üëÜÔ∏è:</p>
<p><code>.domains[] | {id,name} | select(.name | test("charlie"))</code></p>
<p><code>select</code> takes a boolean expression and, if that expression is true, returns that particular item. Everything else is filtered out.</p>
<p>The <code>test</code> function takes a regex (or simple string to match). In our particular case, <code>test</code> is checking against the <code>name</code> property of each object.</p>
<p>Now let's saw only want the <code>id</code> <em>value</em> of the object that matches our test.</p>
<p>We simply change our filter to the below:</p>
<p><code>.domains[] | {id,name} | select(.name | test("charlie")) | .id</code></p>
]]></content:encoded>
            <author>info@biek.org (Mark Biek)</author>
        </item>
        <item>
            <title><![CDATA[Making a Typescript property dependent on the value of another property]]></title>
            <link>https://mark.biek.org//2021/09/making-a-typescript-property-dependent-on-the-value-of-another-property</link>
            <guid>https://mark.biek.org//2021/09/making-a-typescript-property-dependent-on-the-value-of-another-property</guid>
            <pubDate>Thu, 30 Sep 2021 00:42:00 GMT</pubDate>
            <description><![CDATA[<p>I recently ran into a situation where I wanted Typescript to require a certain property, only if the <em>value</em> of a different property was a specific value.</p>
<p>With some help from a <a href="https://github.com/acrobertson">coworker</a> and some additional reading, I found a solution that uses a combination of <a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types">Union</a> and <a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types">Intersection</a> types.</p>
<p>Let's say I have a couple of contrived objects like this</p>
<pre><code>let a = {
	title: 'A title';
	type: 'value';
	value: 'This is a value';
};

let b = {
	title: 'Another title';
	type: 'nothing';
};
</code></pre>
<p>What I want is for the property <code>value</code> to only be required when <code>type == 'value'</code>.</p>
<p>To start, I declare a base type which contains the properties I always want to have:</p>
<pre><code>type Base = {
	title: string;
	type: 'value' | 'nothing';
}
</code></pre>
<p>Then I can declare intersection types for each possible value of the <code>type</code> property:</p>
<pre><code>type ValueType = Base &#x26; {
	type: 'value';
	value: string;
};

type NothingType = Base &#x26; {
	type: 'nothing';
	value: never;
}
</code></pre>
<p>For <code>ValueType</code>, we inherit all of the type properties of the <code>Base</code> type but require a string <code>value</code> property when <code>type == 'value'</code>;</p>
<p>For <code>NothingType</code>, we also inherit everything from <code>Base</code> but specify that the <code>value</code> property should never exist.</p>
<p>Then we create a union type that we'll use on the actual objects we declare:</p>
<pre><code>type MyType = ValueType | NothingType;
</code></pre>
<p>Here are examples of objects that pass all of our type checks:</p>
<pre><code>let good1: MyType = {
	title: 'This is a good object',
	type: 'value',
	value: 'a value'
};

let good2: MyType = {
	title: 'This is a good object',
	type: 'nothing',
};
</code></pre>
<p>And here are some objects that throw type errors:</p>
<pre><code>let bad1: MyType = {
	title: 'This is a good object',
	type: 'value',
	// Here, we're missing the `value` property
};

let bad2: MyType = {
	title: 'This is a good object',
	type: 'nothing',
	value: 'another value'
	// Here, we shouldn't have a `value` property at all
};
</code></pre>
<p><a href="https://www.typescriptlang.org/play?#code/C4TwDgpgBAQghgZ2gXigbwFAEhgEtgA2EAXFAsAE64B2A5gNzaiSkDkAbnAQK4StQAfKK2oB7YAAsatVowC+GDM2gA1LrwAq4FLETQAZOiba2nHn0ZYzvUuSp15jJdqgA5cVLpbIUVPCRQhpg4JsJiktKy2NYkUNQQ7BAU8orKUACyIN46aubZgm4e0tlORMBQtKKiACakmfmowXiEsawaUghQuJ1wFVXVUKIARgBWEADGwKwANMYswjEz0eqtvYsYcqUQ5UNw1QCMdVkujUz4RGzt3V09fTWDoxNTsyHzHCtLm4plULvVAExHBpGHDnVpXTrXXqVe7DMaTJavVrhTwyF4xNhwFFJKDrTZAA">Typescript playground example</a></p>
<h2>Update</h2>
<p>The aforementioned <a href="https://github.com/acrobertson">coworker</a> also showed me a nice way to do the same as the above using Interfaces which gives you slightly nicer error messages.</p>
<p><a href="https://www.typescriptlang.org/play?#code/JYOwLgpgTgZghgYwgAgEJwM4oN4CgCQYwYANhAFzIZhSgDmA3AWAJ4AOFyA5AG5wkBXCF2QAfbiAD2YABb0uTAL65coSLEQoAavyEAVdiggAPSCAAmGNJhzNDlXruFN8fQZ2q0QjXMtXhoeCRkADlpOW8DDmQTM0trLGQ8QntuNyEFAnTOEAgeaCUVVmiAWRYolABeZB13CrFQ8PoKplwyMGQ6SUlzSjL66uSiUk4uPTkrYCs4Tu7zZEkAIwArCAQwLgAaOw4HbK2spwcZ-d9WtogOxbhzAEY+8sNkQeZiMgdxqeQvma6ehZWaw22xSuzSTgOila7WQ13MACYHgMkq8Rh8Jt9prN-ktVusDqDRlJZPIQdljsSZNBkKcoUA">Typescript playground example</a></p>
]]></description>
            <content:encoded><![CDATA[<p>I recently ran into a situation where I wanted Typescript to require a certain property, only if the <em>value</em> of a different property was a specific value.</p>
<p>With some help from a <a href="https://github.com/acrobertson">coworker</a> and some additional reading, I found a solution that uses a combination of <a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types">Union</a> and <a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types">Intersection</a> types.</p>
<p>Let's say I have a couple of contrived objects like this</p>
<pre><code>let a = {
	title: 'A title';
	type: 'value';
	value: 'This is a value';
};

let b = {
	title: 'Another title';
	type: 'nothing';
};
</code></pre>
<p>What I want is for the property <code>value</code> to only be required when <code>type == 'value'</code>.</p>
<p>To start, I declare a base type which contains the properties I always want to have:</p>
<pre><code>type Base = {
	title: string;
	type: 'value' | 'nothing';
}
</code></pre>
<p>Then I can declare intersection types for each possible value of the <code>type</code> property:</p>
<pre><code>type ValueType = Base &#x26; {
	type: 'value';
	value: string;
};

type NothingType = Base &#x26; {
	type: 'nothing';
	value: never;
}
</code></pre>
<p>For <code>ValueType</code>, we inherit all of the type properties of the <code>Base</code> type but require a string <code>value</code> property when <code>type == 'value'</code>;</p>
<p>For <code>NothingType</code>, we also inherit everything from <code>Base</code> but specify that the <code>value</code> property should never exist.</p>
<p>Then we create a union type that we'll use on the actual objects we declare:</p>
<pre><code>type MyType = ValueType | NothingType;
</code></pre>
<p>Here are examples of objects that pass all of our type checks:</p>
<pre><code>let good1: MyType = {
	title: 'This is a good object',
	type: 'value',
	value: 'a value'
};

let good2: MyType = {
	title: 'This is a good object',
	type: 'nothing',
};
</code></pre>
<p>And here are some objects that throw type errors:</p>
<pre><code>let bad1: MyType = {
	title: 'This is a good object',
	type: 'value',
	// Here, we're missing the `value` property
};

let bad2: MyType = {
	title: 'This is a good object',
	type: 'nothing',
	value: 'another value'
	// Here, we shouldn't have a `value` property at all
};
</code></pre>
<p><a href="https://www.typescriptlang.org/play?#code/C4TwDgpgBAQghgZ2gXigbwFAEhgEtgA2EAXFAsAE64B2A5gNzaiSkDkAbnAQK4StQAfKK2oB7YAAsatVowC+GDM2gA1LrwAq4FLETQAZOiba2nHn0ZYzvUuSp15jJdqgA5cVLpbIUVPCRQhpg4JsJiktKy2NYkUNQQ7BAU8orKUACyIN46aubZgm4e0tlORMBQtKKiACakmfmowXiEsawaUghQuJ1wFVXVUKIARgBWEADGwKwANMYswjEz0eqtvYsYcqUQ5UNw1QCMdVkujUz4RGzt3V09fTWDoxNTsyHzHCtLm4plULvVAExHBpGHDnVpXTrXXqVe7DMaTJavVrhTwyF4xNhwFFJKDrTZAA">Typescript playground example</a></p>
<h2>Update</h2>
<p>The aforementioned <a href="https://github.com/acrobertson">coworker</a> also showed me a nice way to do the same as the above using Interfaces which gives you slightly nicer error messages.</p>
<p><a href="https://www.typescriptlang.org/play?#code/JYOwLgpgTgZghgYwgAgEJwM4oN4CgCQYwYANhAFzIZhSgDmA3AWAJ4AOFyA5AG5wkBXCF2QAfbiAD2YABb0uTAL65coSLEQoAavyEAVdiggAPSCAAmGNJhzNDlXruFN8fQZ2q0QjXMtXhoeCRkADlpOW8DDmQTM0trLGQ8QntuNyEFAnTOEAgeaCUVVmiAWRYolABeZB13CrFQ8PoKplwyMGQ6SUlzSjL66uSiUk4uPTkrYCs4Tu7zZEkAIwArCAQwLgAaOw4HbK2spwcZ-d9WtogOxbhzAEY+8sNkQeZiMgdxqeQvma6ehZWaw22xSuzSTgOila7WQ13MACYHgMkq8Rh8Jt9prN-ktVusDqDRlJZPIQdljsSZNBkKcoUA">Typescript playground example</a></p>
]]></content:encoded>
            <author>info@biek.org (Mark Biek)</author>
        </item>
    </channel>
</rss>